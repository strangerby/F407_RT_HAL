ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"idle.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.rt_thread_idle_excute,"ax",%progbits
  16              		.align	1
  17              		.global	rt_thread_idle_excute
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	rt_thread_idle_excute:
  25              	.LFB16:
  26              		.file 1 "RT-Thread/src/idle.c"
   1:RT-Thread/src/idle.c **** /*
   2:RT-Thread/src/idle.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:RT-Thread/src/idle.c ****  *
   4:RT-Thread/src/idle.c ****  * SPDX-License-Identifier: Apache-2.0
   5:RT-Thread/src/idle.c ****  *
   6:RT-Thread/src/idle.c ****  * Change Logs:
   7:RT-Thread/src/idle.c ****  * Date           Author       Notes
   8:RT-Thread/src/idle.c ****  * 2006-03-23     Bernard      the first version
   9:RT-Thread/src/idle.c ****  * 2010-11-10     Bernard      add cleanup callback function in thread exit.
  10:RT-Thread/src/idle.c ****  * 2012-12-29     Bernard      fix compiling warning.
  11:RT-Thread/src/idle.c ****  * 2013-12-21     Grissiom     let rt_thread_idle_excute loop until there is no
  12:RT-Thread/src/idle.c ****  *                             dead thread.
  13:RT-Thread/src/idle.c ****  * 2016-08-09     ArdaFu       add method to get the handler of the idle thread.
  14:RT-Thread/src/idle.c ****  * 2018-02-07     Bernard      lock scheduler to protect tid->cleanup.
  15:RT-Thread/src/idle.c ****  * 2018-07-14     armink       add idle hook list
  16:RT-Thread/src/idle.c ****  */
  17:RT-Thread/src/idle.c **** 
  18:RT-Thread/src/idle.c **** #include <rthw.h>
  19:RT-Thread/src/idle.c **** #include <rtthread.h>
  20:RT-Thread/src/idle.c **** 
  21:RT-Thread/src/idle.c **** #ifdef RT_USING_MODULE
  22:RT-Thread/src/idle.c **** #include <dlmodule.h>
  23:RT-Thread/src/idle.c **** #endif
  24:RT-Thread/src/idle.c **** 
  25:RT-Thread/src/idle.c **** #if defined (RT_USING_HOOK)
  26:RT-Thread/src/idle.c **** #ifndef RT_USING_IDLE_HOOK
  27:RT-Thread/src/idle.c **** #define RT_USING_IDLE_HOOK
  28:RT-Thread/src/idle.c **** #endif
  29:RT-Thread/src/idle.c **** #endif
  30:RT-Thread/src/idle.c **** 
  31:RT-Thread/src/idle.c **** #ifndef IDLE_THREAD_STACK_SIZE
  32:RT-Thread/src/idle.c **** #if defined (RT_USING_IDLE_HOOK) || defined(RT_USING_HEAP)
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 2


  33:RT-Thread/src/idle.c **** #define IDLE_THREAD_STACK_SIZE  256
  34:RT-Thread/src/idle.c **** #else
  35:RT-Thread/src/idle.c **** #define IDLE_THREAD_STACK_SIZE  128
  36:RT-Thread/src/idle.c **** #endif
  37:RT-Thread/src/idle.c **** #endif
  38:RT-Thread/src/idle.c **** 
  39:RT-Thread/src/idle.c **** static struct rt_thread idle;
  40:RT-Thread/src/idle.c **** ALIGN(RT_ALIGN_SIZE)
  41:RT-Thread/src/idle.c **** static rt_uint8_t rt_thread_stack[IDLE_THREAD_STACK_SIZE];
  42:RT-Thread/src/idle.c **** 
  43:RT-Thread/src/idle.c **** extern rt_list_t rt_thread_defunct;
  44:RT-Thread/src/idle.c **** 
  45:RT-Thread/src/idle.c **** #ifdef RT_USING_IDLE_HOOK
  46:RT-Thread/src/idle.c **** 
  47:RT-Thread/src/idle.c **** #ifndef RT_IDEL_HOOK_LIST_SIZE
  48:RT-Thread/src/idle.c **** #define RT_IDEL_HOOK_LIST_SIZE          4
  49:RT-Thread/src/idle.c **** #endif
  50:RT-Thread/src/idle.c **** 
  51:RT-Thread/src/idle.c **** static void (*idle_hook_list[RT_IDEL_HOOK_LIST_SIZE])();
  52:RT-Thread/src/idle.c **** 
  53:RT-Thread/src/idle.c **** /**
  54:RT-Thread/src/idle.c ****  * @ingroup Hook
  55:RT-Thread/src/idle.c ****  * This function sets a hook function to idle thread loop. When the system performs
  56:RT-Thread/src/idle.c ****  * idle loop, this hook function should be invoked.
  57:RT-Thread/src/idle.c ****  *
  58:RT-Thread/src/idle.c ****  * @param hook the specified hook function
  59:RT-Thread/src/idle.c ****  *
  60:RT-Thread/src/idle.c ****  * @return RT_EOK: set OK
  61:RT-Thread/src/idle.c ****  *         -RT_EFULL: hook list is full
  62:RT-Thread/src/idle.c ****  *
  63:RT-Thread/src/idle.c ****  * @note the hook function must be simple and never be blocked or suspend.
  64:RT-Thread/src/idle.c ****  */
  65:RT-Thread/src/idle.c **** rt_err_t rt_thread_idle_sethook(void (*hook)(void))
  66:RT-Thread/src/idle.c **** {
  67:RT-Thread/src/idle.c ****     rt_size_t i;
  68:RT-Thread/src/idle.c ****     rt_base_t level;
  69:RT-Thread/src/idle.c ****     rt_err_t ret = -RT_EFULL;
  70:RT-Thread/src/idle.c **** 
  71:RT-Thread/src/idle.c ****     /* disable interrupt */
  72:RT-Thread/src/idle.c ****     level = rt_hw_interrupt_disable();
  73:RT-Thread/src/idle.c **** 
  74:RT-Thread/src/idle.c ****     for (i = 0; i < RT_IDEL_HOOK_LIST_SIZE; i++)
  75:RT-Thread/src/idle.c ****     {
  76:RT-Thread/src/idle.c ****         if (idle_hook_list[i] == RT_NULL)
  77:RT-Thread/src/idle.c ****         {
  78:RT-Thread/src/idle.c ****             idle_hook_list[i] = hook;
  79:RT-Thread/src/idle.c ****             ret = RT_EOK;
  80:RT-Thread/src/idle.c ****             break;
  81:RT-Thread/src/idle.c ****         }
  82:RT-Thread/src/idle.c ****     }
  83:RT-Thread/src/idle.c ****     /* enable interrupt */
  84:RT-Thread/src/idle.c ****     rt_hw_interrupt_enable(level);
  85:RT-Thread/src/idle.c **** 
  86:RT-Thread/src/idle.c ****     return ret;
  87:RT-Thread/src/idle.c **** }
  88:RT-Thread/src/idle.c **** 
  89:RT-Thread/src/idle.c **** /**
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 3


  90:RT-Thread/src/idle.c ****  * delete the idle hook on hook list
  91:RT-Thread/src/idle.c ****  *
  92:RT-Thread/src/idle.c ****  * @param hook the specified hook function
  93:RT-Thread/src/idle.c ****  *
  94:RT-Thread/src/idle.c ****  * @return RT_EOK: delete OK
  95:RT-Thread/src/idle.c ****  *         -RT_ENOSYS: hook was not found
  96:RT-Thread/src/idle.c ****  */
  97:RT-Thread/src/idle.c **** rt_err_t rt_thread_idle_delhook(void (*hook)(void))
  98:RT-Thread/src/idle.c **** {
  99:RT-Thread/src/idle.c ****     rt_size_t i;
 100:RT-Thread/src/idle.c ****     rt_base_t level;
 101:RT-Thread/src/idle.c ****     rt_err_t ret = -RT_ENOSYS;
 102:RT-Thread/src/idle.c **** 
 103:RT-Thread/src/idle.c ****     /* disable interrupt */
 104:RT-Thread/src/idle.c ****     level = rt_hw_interrupt_disable();
 105:RT-Thread/src/idle.c **** 
 106:RT-Thread/src/idle.c ****     for (i = 0; i < RT_IDEL_HOOK_LIST_SIZE; i++)
 107:RT-Thread/src/idle.c ****     {
 108:RT-Thread/src/idle.c ****         if (idle_hook_list[i] == hook)
 109:RT-Thread/src/idle.c ****         {
 110:RT-Thread/src/idle.c ****             idle_hook_list[i] = RT_NULL;
 111:RT-Thread/src/idle.c ****             ret = RT_EOK;
 112:RT-Thread/src/idle.c ****             break;
 113:RT-Thread/src/idle.c ****         }
 114:RT-Thread/src/idle.c ****     }
 115:RT-Thread/src/idle.c ****     /* enable interrupt */
 116:RT-Thread/src/idle.c ****     rt_hw_interrupt_enable(level);
 117:RT-Thread/src/idle.c **** 
 118:RT-Thread/src/idle.c ****     return ret;
 119:RT-Thread/src/idle.c **** }
 120:RT-Thread/src/idle.c **** 
 121:RT-Thread/src/idle.c **** #endif
 122:RT-Thread/src/idle.c **** 
 123:RT-Thread/src/idle.c **** /* Return whether there is defunctional thread to be deleted. */
 124:RT-Thread/src/idle.c **** rt_inline int _has_defunct_thread(void)
 125:RT-Thread/src/idle.c **** {
 126:RT-Thread/src/idle.c ****     /* The rt_list_isempty has prototype of "int rt_list_isempty(const rt_list_t *l)".
 127:RT-Thread/src/idle.c ****      * So the compiler has a good reason that the rt_thread_defunct list does
 128:RT-Thread/src/idle.c ****      * not change within rt_thread_idle_excute thus optimize the "while" loop
 129:RT-Thread/src/idle.c ****      * into a "if".
 130:RT-Thread/src/idle.c ****      *
 131:RT-Thread/src/idle.c ****      * So add the volatile qualifier here. */
 132:RT-Thread/src/idle.c ****     const volatile rt_list_t *l = (const volatile rt_list_t *)&rt_thread_defunct;
 133:RT-Thread/src/idle.c **** 
 134:RT-Thread/src/idle.c ****     return l->next != l;
 135:RT-Thread/src/idle.c **** }
 136:RT-Thread/src/idle.c **** 
 137:RT-Thread/src/idle.c **** /**
 138:RT-Thread/src/idle.c ****  * @ingroup Thread
 139:RT-Thread/src/idle.c ****  *
 140:RT-Thread/src/idle.c ****  * This function will perform system background job when system idle.
 141:RT-Thread/src/idle.c ****  */
 142:RT-Thread/src/idle.c **** void rt_thread_idle_excute(void)
 143:RT-Thread/src/idle.c **** {
  27              		.loc 1 143 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 4


  30              		@ frame_needed = 0, uses_anonymous_args = 0
 144:RT-Thread/src/idle.c ****     /* Loop until there is no dead thread. So one call to rt_thread_idle_excute
 145:RT-Thread/src/idle.c ****      * will do all the cleanups. */
 146:RT-Thread/src/idle.c ****     while (_has_defunct_thread())
  31              		.loc 1 146 5 view .LVU1
  32              		.loc 1 146 11 view .LVU2
  33              	.LBB9:
  34              	.LBI9:
 124:RT-Thread/src/idle.c **** {
  35              		.loc 1 124 15 view .LVU3
  36              	.LBB10:
 132:RT-Thread/src/idle.c **** 
  37              		.loc 1 132 5 view .LVU4
  38              	.LVL0:
 134:RT-Thread/src/idle.c **** }
  39              		.loc 1 134 5 view .LVU5
 134:RT-Thread/src/idle.c **** }
  40              		.loc 1 134 13 is_stmt 0 view .LVU6
  41 0000 1F4B     		ldr	r3, .L14
  42 0002 1A68     		ldr	r2, [r3]
  43              	.LBE10:
  44              	.LBE9:
  45              		.loc 1 146 11 view .LVU7
  46 0004 9A42     		cmp	r2, r3
  47 0006 3AD0     		beq	.L12
 143:RT-Thread/src/idle.c ****     /* Loop until there is no dead thread. So one call to rt_thread_idle_excute
  48              		.loc 1 143 1 view .LVU8
  49 0008 70B5     		push	{r4, r5, r6, lr}
  50              	.LCFI0:
  51              		.cfi_def_cfa_offset 16
  52              		.cfi_offset 4, -16
  53              		.cfi_offset 5, -12
  54              		.cfi_offset 6, -8
  55              		.cfi_offset 14, -4
  56 000a 13E0     		b	.L7
  57              	.LVL1:
  58              	.L4:
  59              	.LBB12:
 147:RT-Thread/src/idle.c ****     {
 148:RT-Thread/src/idle.c ****         rt_base_t lock;
 149:RT-Thread/src/idle.c ****         rt_thread_t thread;
 150:RT-Thread/src/idle.c **** #ifdef RT_USING_MODULE
 151:RT-Thread/src/idle.c ****         struct rt_dlmodule *module = RT_NULL;
 152:RT-Thread/src/idle.c **** #endif
 153:RT-Thread/src/idle.c ****         RT_DEBUG_NOT_IN_INTERRUPT;
 154:RT-Thread/src/idle.c **** 
 155:RT-Thread/src/idle.c ****         /* disable interrupt */
 156:RT-Thread/src/idle.c ****         lock = rt_hw_interrupt_disable();
 157:RT-Thread/src/idle.c **** 
 158:RT-Thread/src/idle.c ****         /* re-check whether list is empty */
 159:RT-Thread/src/idle.c ****         if (_has_defunct_thread())
 160:RT-Thread/src/idle.c ****         {
 161:RT-Thread/src/idle.c ****             /* get defunct thread */
 162:RT-Thread/src/idle.c ****             thread = rt_list_entry(rt_thread_defunct.next,
 163:RT-Thread/src/idle.c ****                                    struct rt_thread,
 164:RT-Thread/src/idle.c ****                                    tlist);
 165:RT-Thread/src/idle.c **** #ifdef RT_USING_MODULE
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 5


 166:RT-Thread/src/idle.c ****             module = (struct rt_dlmodule*)thread->module_id;
 167:RT-Thread/src/idle.c ****             if (module)
 168:RT-Thread/src/idle.c ****             {
 169:RT-Thread/src/idle.c ****                 dlmodule_destroy(module);
 170:RT-Thread/src/idle.c ****             }
 171:RT-Thread/src/idle.c **** #endif
 172:RT-Thread/src/idle.c ****             /* remove defunct thread */
 173:RT-Thread/src/idle.c ****             rt_list_remove(&(thread->tlist));
 174:RT-Thread/src/idle.c **** 
 175:RT-Thread/src/idle.c ****             /* lock scheduler to prevent scheduling in cleanup function. */
 176:RT-Thread/src/idle.c ****             rt_enter_critical();
 177:RT-Thread/src/idle.c **** 
 178:RT-Thread/src/idle.c ****             /* invoke thread cleanup */
 179:RT-Thread/src/idle.c ****             if (thread->cleanup != RT_NULL)
 180:RT-Thread/src/idle.c ****                 thread->cleanup(thread);
 181:RT-Thread/src/idle.c **** 
 182:RT-Thread/src/idle.c **** #ifdef RT_USING_SIGNALS
 183:RT-Thread/src/idle.c ****             rt_thread_free_sig(thread);
 184:RT-Thread/src/idle.c **** #endif
 185:RT-Thread/src/idle.c **** 
 186:RT-Thread/src/idle.c ****             /* if it's a system object, not delete it */
 187:RT-Thread/src/idle.c ****             if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
  60              		.loc 1 187 13 is_stmt 1 view .LVU9
  61              		.loc 1 187 17 is_stmt 0 view .LVU10
  62 000c 2846     		mov	r0, r5
  63 000e FFF7FEFF 		bl	rt_object_is_systemobject
  64              	.LVL2:
  65              		.loc 1 187 16 view .LVU11
  66 0012 0128     		cmp	r0, #1
  67 0014 27D0     		beq	.L13
 188:RT-Thread/src/idle.c ****             {
 189:RT-Thread/src/idle.c ****                 /* detach this object */
 190:RT-Thread/src/idle.c ****                 rt_object_detach((rt_object_t)thread);
 191:RT-Thread/src/idle.c ****                 /* unlock scheduler */
 192:RT-Thread/src/idle.c ****                 rt_exit_critical();
 193:RT-Thread/src/idle.c **** 
 194:RT-Thread/src/idle.c ****                 /* enable interrupt */
 195:RT-Thread/src/idle.c ****                 rt_hw_interrupt_enable(lock);
 196:RT-Thread/src/idle.c **** 
 197:RT-Thread/src/idle.c ****                 return;
 198:RT-Thread/src/idle.c ****             }
 199:RT-Thread/src/idle.c **** 
 200:RT-Thread/src/idle.c ****             /* unlock scheduler */
 201:RT-Thread/src/idle.c ****             rt_exit_critical();
  68              		.loc 1 201 13 is_stmt 1 view .LVU12
  69 0016 FFF7FEFF 		bl	rt_exit_critical
  70              	.LVL3:
 202:RT-Thread/src/idle.c ****         }
 203:RT-Thread/src/idle.c ****         else
 204:RT-Thread/src/idle.c ****         {
 205:RT-Thread/src/idle.c ****             /* enable interrupt */
 206:RT-Thread/src/idle.c ****             rt_hw_interrupt_enable(lock);
 207:RT-Thread/src/idle.c **** 
 208:RT-Thread/src/idle.c ****             /* may the defunct thread list is removed by others, just return */
 209:RT-Thread/src/idle.c ****             return;
 210:RT-Thread/src/idle.c ****         }
 211:RT-Thread/src/idle.c **** 
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 6


 212:RT-Thread/src/idle.c ****         /* enable interrupt */
 213:RT-Thread/src/idle.c ****         rt_hw_interrupt_enable(lock);
  71              		.loc 1 213 9 view .LVU13
  72 001a 3046     		mov	r0, r6
  73 001c FFF7FEFF 		bl	rt_hw_interrupt_enable
  74              	.LVL4:
 214:RT-Thread/src/idle.c **** 
 215:RT-Thread/src/idle.c **** #ifdef RT_USING_HEAP
 216:RT-Thread/src/idle.c ****         /* release thread's stack */
 217:RT-Thread/src/idle.c ****         RT_KERNEL_FREE(thread->stack_addr);
  75              		.loc 1 217 9 view .LVU14
  76 0020 6069     		ldr	r0, [r4, #20]
  77 0022 FFF7FEFF 		bl	rt_free
  78              	.LVL5:
 218:RT-Thread/src/idle.c ****         /* delete thread object */
 219:RT-Thread/src/idle.c ****         rt_object_delete((rt_object_t)thread);
  79              		.loc 1 219 9 view .LVU15
  80 0026 2846     		mov	r0, r5
  81 0028 FFF7FEFF 		bl	rt_object_delete
  82              	.LVL6:
  83              	.LBE12:
 146:RT-Thread/src/idle.c ****     {
  84              		.loc 1 146 11 view .LVU16
  85              	.LBB17:
 124:RT-Thread/src/idle.c **** {
  86              		.loc 1 124 15 view .LVU17
  87              	.LBB11:
 132:RT-Thread/src/idle.c **** 
  88              		.loc 1 132 5 view .LVU18
 134:RT-Thread/src/idle.c **** }
  89              		.loc 1 134 5 view .LVU19
 134:RT-Thread/src/idle.c **** }
  90              		.loc 1 134 13 is_stmt 0 view .LVU20
  91 002c 144B     		ldr	r3, .L14
  92 002e 1A68     		ldr	r2, [r3]
  93              	.LBE11:
  94              	.LBE17:
 146:RT-Thread/src/idle.c ****     {
  95              		.loc 1 146 11 view .LVU21
  96 0030 9A42     		cmp	r2, r3
  97 0032 23D0     		beq	.L1
  98              	.LVL7:
  99              	.L7:
 100              	.LBB18:
 148:RT-Thread/src/idle.c ****         rt_thread_t thread;
 101              		.loc 1 148 9 is_stmt 1 view .LVU22
 149:RT-Thread/src/idle.c **** #ifdef RT_USING_MODULE
 102              		.loc 1 149 9 view .LVU23
 153:RT-Thread/src/idle.c **** 
 103              		.loc 1 153 34 view .LVU24
 156:RT-Thread/src/idle.c **** 
 104              		.loc 1 156 9 view .LVU25
 156:RT-Thread/src/idle.c **** 
 105              		.loc 1 156 16 is_stmt 0 view .LVU26
 106 0034 FFF7FEFF 		bl	rt_hw_interrupt_disable
 107              	.LVL8:
 108 0038 0646     		mov	r6, r0
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 7


 109              	.LVL9:
 159:RT-Thread/src/idle.c ****         {
 110              		.loc 1 159 9 is_stmt 1 view .LVU27
 111              	.LBB13:
 112              	.LBI13:
 124:RT-Thread/src/idle.c **** {
 113              		.loc 1 124 15 view .LVU28
 114              	.LBB14:
 132:RT-Thread/src/idle.c **** 
 115              		.loc 1 132 5 view .LVU29
 134:RT-Thread/src/idle.c **** }
 116              		.loc 1 134 5 view .LVU30
 134:RT-Thread/src/idle.c **** }
 117              		.loc 1 134 13 is_stmt 0 view .LVU31
 118 003a 114B     		ldr	r3, .L14
 119 003c 1A68     		ldr	r2, [r3]
 120              	.LBE14:
 121              	.LBE13:
 159:RT-Thread/src/idle.c ****         {
 122              		.loc 1 159 12 view .LVU32
 123 003e 9A42     		cmp	r2, r3
 124 0040 1AD0     		beq	.L3
 162:RT-Thread/src/idle.c ****                                    struct rt_thread,
 125              		.loc 1 162 13 is_stmt 1 view .LVU33
 162:RT-Thread/src/idle.c ****                                    struct rt_thread,
 126              		.loc 1 162 22 is_stmt 0 view .LVU34
 127 0042 1C68     		ldr	r4, [r3]
 162:RT-Thread/src/idle.c ****                                    struct rt_thread,
 128              		.loc 1 162 20 view .LVU35
 129 0044 2546     		mov	r5, r4
 130              	.LVL10:
 173:RT-Thread/src/idle.c **** 
 131              		.loc 1 173 13 is_stmt 1 view .LVU36
 132              	.LBB15:
 133              	.LBI15:
 134              		.file 2 "RT-Thread/include/rtservice.h"
   1:RT-Thread/include/rtservice.h **** /*
   2:RT-Thread/include/rtservice.h ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:RT-Thread/include/rtservice.h ****  *
   4:RT-Thread/include/rtservice.h ****  * SPDX-License-Identifier: Apache-2.0
   5:RT-Thread/include/rtservice.h ****  *
   6:RT-Thread/include/rtservice.h ****  * Change Logs:
   7:RT-Thread/include/rtservice.h ****  * Date           Author       Notes
   8:RT-Thread/include/rtservice.h ****  * 2006-03-16     Bernard      the first version
   9:RT-Thread/include/rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  10:RT-Thread/include/rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  11:RT-Thread/include/rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  12:RT-Thread/include/rtservice.h ****  * 2017-11-15     JasonJia     Modify rt_slist_foreach to rt_slist_for_each_entry.
  13:RT-Thread/include/rtservice.h ****  *                             Make code cleanup.
  14:RT-Thread/include/rtservice.h ****  */
  15:RT-Thread/include/rtservice.h **** 
  16:RT-Thread/include/rtservice.h **** #ifndef __RT_SERVICE_H__
  17:RT-Thread/include/rtservice.h **** #define __RT_SERVICE_H__
  18:RT-Thread/include/rtservice.h **** 
  19:RT-Thread/include/rtservice.h **** #ifdef __cplusplus
  20:RT-Thread/include/rtservice.h **** extern "C" {
  21:RT-Thread/include/rtservice.h **** #endif
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 8


  22:RT-Thread/include/rtservice.h **** 
  23:RT-Thread/include/rtservice.h **** /**
  24:RT-Thread/include/rtservice.h ****  * @addtogroup KernelService
  25:RT-Thread/include/rtservice.h ****  */
  26:RT-Thread/include/rtservice.h **** 
  27:RT-Thread/include/rtservice.h **** /**@{*/
  28:RT-Thread/include/rtservice.h **** 
  29:RT-Thread/include/rtservice.h **** /**
  30:RT-Thread/include/rtservice.h ****  * rt_container_of - return the member address of ptr, if the type of ptr is the
  31:RT-Thread/include/rtservice.h ****  * struct type.
  32:RT-Thread/include/rtservice.h ****  */
  33:RT-Thread/include/rtservice.h **** #define rt_container_of(ptr, type, member) \
  34:RT-Thread/include/rtservice.h ****     ((type *)((char *)(ptr) - (unsigned long)(&((type *)0)->member)))
  35:RT-Thread/include/rtservice.h **** 
  36:RT-Thread/include/rtservice.h **** 
  37:RT-Thread/include/rtservice.h **** /**
  38:RT-Thread/include/rtservice.h ****  * @brief initialize a list object
  39:RT-Thread/include/rtservice.h ****  */
  40:RT-Thread/include/rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  41:RT-Thread/include/rtservice.h **** 
  42:RT-Thread/include/rtservice.h **** /**
  43:RT-Thread/include/rtservice.h ****  * @brief initialize a list
  44:RT-Thread/include/rtservice.h ****  *
  45:RT-Thread/include/rtservice.h ****  * @param l list to be initialized
  46:RT-Thread/include/rtservice.h ****  */
  47:RT-Thread/include/rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
  48:RT-Thread/include/rtservice.h **** {
  49:RT-Thread/include/rtservice.h ****     l->next = l->prev = l;
  50:RT-Thread/include/rtservice.h **** }
  51:RT-Thread/include/rtservice.h **** 
  52:RT-Thread/include/rtservice.h **** /**
  53:RT-Thread/include/rtservice.h ****  * @brief insert a node after a list
  54:RT-Thread/include/rtservice.h ****  *
  55:RT-Thread/include/rtservice.h ****  * @param l list to insert it
  56:RT-Thread/include/rtservice.h ****  * @param n new node to be inserted
  57:RT-Thread/include/rtservice.h ****  */
  58:RT-Thread/include/rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
  59:RT-Thread/include/rtservice.h **** {
  60:RT-Thread/include/rtservice.h ****     l->next->prev = n;
  61:RT-Thread/include/rtservice.h ****     n->next = l->next;
  62:RT-Thread/include/rtservice.h **** 
  63:RT-Thread/include/rtservice.h ****     l->next = n;
  64:RT-Thread/include/rtservice.h ****     n->prev = l;
  65:RT-Thread/include/rtservice.h **** }
  66:RT-Thread/include/rtservice.h **** 
  67:RT-Thread/include/rtservice.h **** /**
  68:RT-Thread/include/rtservice.h ****  * @brief insert a node before a list
  69:RT-Thread/include/rtservice.h ****  *
  70:RT-Thread/include/rtservice.h ****  * @param n new node to be inserted
  71:RT-Thread/include/rtservice.h ****  * @param l list to insert it
  72:RT-Thread/include/rtservice.h ****  */
  73:RT-Thread/include/rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  74:RT-Thread/include/rtservice.h **** {
  75:RT-Thread/include/rtservice.h ****     l->prev->next = n;
  76:RT-Thread/include/rtservice.h ****     n->prev = l->prev;
  77:RT-Thread/include/rtservice.h **** 
  78:RT-Thread/include/rtservice.h ****     l->prev = n;
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 9


  79:RT-Thread/include/rtservice.h ****     n->next = l;
  80:RT-Thread/include/rtservice.h **** }
  81:RT-Thread/include/rtservice.h **** 
  82:RT-Thread/include/rtservice.h **** /**
  83:RT-Thread/include/rtservice.h ****  * @brief remove node from list.
  84:RT-Thread/include/rtservice.h ****  * @param n the node to remove from the list.
  85:RT-Thread/include/rtservice.h ****  */
  86:RT-Thread/include/rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
 135              		.loc 2 86 16 view .LVU37
 136              	.LBB16:
  87:RT-Thread/include/rtservice.h **** {
  88:RT-Thread/include/rtservice.h ****     n->next->prev = n->prev;
 137              		.loc 2 88 5 view .LVU38
 138              		.loc 2 88 6 is_stmt 0 view .LVU39
 139 0046 55F81429 		ldr	r2, [r5], #-20
 140              	.LVL11:
 141              		.loc 2 88 22 view .LVU40
 142 004a 6368     		ldr	r3, [r4, #4]
 143              		.loc 2 88 19 view .LVU41
 144 004c 5360     		str	r3, [r2, #4]
  89:RT-Thread/include/rtservice.h ****     n->prev->next = n->next;
 145              		.loc 2 89 5 is_stmt 1 view .LVU42
 146              		.loc 2 89 22 is_stmt 0 view .LVU43
 147 004e 2268     		ldr	r2, [r4]
 148              		.loc 2 89 19 view .LVU44
 149 0050 1A60     		str	r2, [r3]
  90:RT-Thread/include/rtservice.h **** 
  91:RT-Thread/include/rtservice.h ****     n->next = n->prev = n;
 150              		.loc 2 91 5 is_stmt 1 view .LVU45
 151              		.loc 2 91 23 is_stmt 0 view .LVU46
 152 0052 6460     		str	r4, [r4, #4]
 153              		.loc 2 91 13 view .LVU47
 154 0054 2460     		str	r4, [r4]
 155              	.LVL12:
 156              		.loc 2 91 13 view .LVU48
 157              	.LBE16:
 158              	.LBE15:
 176:RT-Thread/src/idle.c **** 
 159              		.loc 1 176 13 is_stmt 1 view .LVU49
 160 0056 FFF7FEFF 		bl	rt_enter_critical
 161              	.LVL13:
 179:RT-Thread/src/idle.c ****                 thread->cleanup(thread);
 162              		.loc 1 179 13 view .LVU50
 179:RT-Thread/src/idle.c ****                 thread->cleanup(thread);
 163              		.loc 1 179 23 is_stmt 0 view .LVU51
 164 005a A36E     		ldr	r3, [r4, #104]
 179:RT-Thread/src/idle.c ****                 thread->cleanup(thread);
 165              		.loc 1 179 16 view .LVU52
 166 005c 002B     		cmp	r3, #0
 167 005e D5D0     		beq	.L4
 180:RT-Thread/src/idle.c **** 
 168              		.loc 1 180 17 is_stmt 1 view .LVU53
 169 0060 2846     		mov	r0, r5
 170 0062 9847     		blx	r3
 171              	.LVL14:
 172 0064 D2E7     		b	.L4
 173              	.L13:
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 10


 190:RT-Thread/src/idle.c ****                 /* unlock scheduler */
 174              		.loc 1 190 17 view .LVU54
 175 0066 2846     		mov	r0, r5
 176 0068 FFF7FEFF 		bl	rt_object_detach
 177              	.LVL15:
 192:RT-Thread/src/idle.c **** 
 178              		.loc 1 192 17 view .LVU55
 179 006c FFF7FEFF 		bl	rt_exit_critical
 180              	.LVL16:
 195:RT-Thread/src/idle.c **** 
 181              		.loc 1 195 17 view .LVU56
 182 0070 3046     		mov	r0, r6
 183 0072 FFF7FEFF 		bl	rt_hw_interrupt_enable
 184              	.LVL17:
 197:RT-Thread/src/idle.c ****             }
 185              		.loc 1 197 17 view .LVU57
 186 0076 01E0     		b	.L1
 187              	.LVL18:
 188              	.L3:
 206:RT-Thread/src/idle.c **** 
 189              		.loc 1 206 13 view .LVU58
 190 0078 FFF7FEFF 		bl	rt_hw_interrupt_enable
 191              	.LVL19:
 209:RT-Thread/src/idle.c ****         }
 192              		.loc 1 209 13 view .LVU59
 193              	.L1:
 194              	.LBE18:
 220:RT-Thread/src/idle.c **** #endif
 221:RT-Thread/src/idle.c ****     }
 222:RT-Thread/src/idle.c **** }
 195              		.loc 1 222 1 is_stmt 0 view .LVU60
 196 007c 70BD     		pop	{r4, r5, r6, pc}
 197              	.LVL20:
 198              	.L12:
 199              	.LCFI1:
 200              		.cfi_def_cfa_offset 0
 201              		.cfi_restore 4
 202              		.cfi_restore 5
 203              		.cfi_restore 6
 204              		.cfi_restore 14
 205              		.loc 1 222 1 view .LVU61
 206 007e 7047     		bx	lr
 207              	.L15:
 208              		.align	2
 209              	.L14:
 210 0080 00000000 		.word	rt_thread_defunct
 211              		.cfi_endproc
 212              	.LFE16:
 214              		.section	.text.rt_thread_idle_entry,"ax",%progbits
 215              		.align	1
 216              		.syntax unified
 217              		.thumb
 218              		.thumb_func
 219              		.fpu softvfp
 221              	rt_thread_idle_entry:
 222              	.LFB17:
 223:RT-Thread/src/idle.c **** 
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 11


 224:RT-Thread/src/idle.c **** extern void rt_system_power_manager(void);
 225:RT-Thread/src/idle.c **** static void rt_thread_idle_entry(void *parameter)
 226:RT-Thread/src/idle.c **** {
 223              		.loc 1 226 1 is_stmt 1 view -0
 224              		.cfi_startproc
 225              		@ Volatile: function does not return.
 226              		@ args = 0, pretend = 0, frame = 0
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228              	.LVL21:
 229              		.loc 1 226 1 is_stmt 0 view .LVU63
 230 0000 08B5     		push	{r3, lr}
 231              	.LCFI2:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 3, -8
 234              		.cfi_offset 14, -4
 235              	.LVL22:
 236              	.L17:
 227:RT-Thread/src/idle.c ****     while (1)
 237              		.loc 1 227 5 is_stmt 1 discriminator 1 view .LVU64
 228:RT-Thread/src/idle.c ****     {
 229:RT-Thread/src/idle.c **** 
 230:RT-Thread/src/idle.c **** #ifdef RT_USING_IDLE_HOOK
 231:RT-Thread/src/idle.c ****         rt_size_t i;
 232:RT-Thread/src/idle.c **** 
 233:RT-Thread/src/idle.c ****         for (i = 0; i < RT_IDEL_HOOK_LIST_SIZE; i++)
 234:RT-Thread/src/idle.c ****         {
 235:RT-Thread/src/idle.c ****             if (idle_hook_list[i] != RT_NULL)
 236:RT-Thread/src/idle.c ****             {
 237:RT-Thread/src/idle.c ****                 idle_hook_list[i]();
 238:RT-Thread/src/idle.c ****             }
 239:RT-Thread/src/idle.c ****         }
 240:RT-Thread/src/idle.c **** #endif
 241:RT-Thread/src/idle.c **** 
 242:RT-Thread/src/idle.c ****         rt_thread_idle_excute();
 238              		.loc 1 242 9 discriminator 1 view .LVU65
 239 0002 FFF7FEFF 		bl	rt_thread_idle_excute
 240              	.LVL23:
 227:RT-Thread/src/idle.c ****     while (1)
 241              		.loc 1 227 11 discriminator 1 view .LVU66
 242 0006 FCE7     		b	.L17
 243              		.cfi_endproc
 244              	.LFE17:
 246              		.section	.rodata.rt_thread_idle_init.str1.4,"aMS",%progbits,1
 247              		.align	2
 248              	.LC0:
 249 0000 7469646C 		.ascii	"tidle\000"
 249      6500
 250              		.section	.text.rt_thread_idle_init,"ax",%progbits
 251              		.align	1
 252              		.global	rt_thread_idle_init
 253              		.syntax unified
 254              		.thumb
 255              		.thumb_func
 256              		.fpu softvfp
 258              	rt_thread_idle_init:
 259              	.LFB18:
 243:RT-Thread/src/idle.c **** #ifdef RT_USING_PM        
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 12


 244:RT-Thread/src/idle.c ****         rt_system_power_manager();
 245:RT-Thread/src/idle.c **** #endif
 246:RT-Thread/src/idle.c ****     }
 247:RT-Thread/src/idle.c **** }
 248:RT-Thread/src/idle.c **** 
 249:RT-Thread/src/idle.c **** /**
 250:RT-Thread/src/idle.c ****  * @ingroup SystemInit
 251:RT-Thread/src/idle.c ****  *
 252:RT-Thread/src/idle.c ****  * This function will initialize idle thread, then start it.
 253:RT-Thread/src/idle.c ****  *
 254:RT-Thread/src/idle.c ****  * @note this function must be invoked when system init.
 255:RT-Thread/src/idle.c ****  */
 256:RT-Thread/src/idle.c **** void rt_thread_idle_init(void)
 257:RT-Thread/src/idle.c **** {
 260              		.loc 1 257 1 view -0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264 0000 10B5     		push	{r4, lr}
 265              	.LCFI3:
 266              		.cfi_def_cfa_offset 8
 267              		.cfi_offset 4, -8
 268              		.cfi_offset 14, -4
 269 0002 84B0     		sub	sp, sp, #16
 270              	.LCFI4:
 271              		.cfi_def_cfa_offset 24
 258:RT-Thread/src/idle.c ****     /* initialize thread */
 259:RT-Thread/src/idle.c ****     rt_thread_init(&idle,
 272              		.loc 1 259 5 view .LVU68
 273 0004 0A4C     		ldr	r4, .L21
 274 0006 2023     		movs	r3, #32
 275 0008 0393     		str	r3, [sp, #12]
 276 000a FF23     		movs	r3, #255
 277 000c 0293     		str	r3, [sp, #8]
 278 000e 4FF48073 		mov	r3, #256
 279 0012 0193     		str	r3, [sp, #4]
 280 0014 074B     		ldr	r3, .L21+4
 281 0016 0093     		str	r3, [sp]
 282 0018 0023     		movs	r3, #0
 283 001a 074A     		ldr	r2, .L21+8
 284 001c 0749     		ldr	r1, .L21+12
 285 001e 2046     		mov	r0, r4
 286 0020 FFF7FEFF 		bl	rt_thread_init
 287              	.LVL24:
 260:RT-Thread/src/idle.c ****                    "tidle",
 261:RT-Thread/src/idle.c ****                    rt_thread_idle_entry,
 262:RT-Thread/src/idle.c ****                    RT_NULL,
 263:RT-Thread/src/idle.c ****                    &rt_thread_stack[0],
 264:RT-Thread/src/idle.c ****                    sizeof(rt_thread_stack),
 265:RT-Thread/src/idle.c ****                    RT_THREAD_PRIORITY_MAX - 1,
 266:RT-Thread/src/idle.c ****                    32);
 267:RT-Thread/src/idle.c **** 
 268:RT-Thread/src/idle.c ****     /* startup */
 269:RT-Thread/src/idle.c ****     rt_thread_startup(&idle);
 288              		.loc 1 269 5 view .LVU69
 289 0024 2046     		mov	r0, r4
 290 0026 FFF7FEFF 		bl	rt_thread_startup
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 13


 291              	.LVL25:
 270:RT-Thread/src/idle.c **** }
 292              		.loc 1 270 1 is_stmt 0 view .LVU70
 293 002a 04B0     		add	sp, sp, #16
 294              	.LCFI5:
 295              		.cfi_def_cfa_offset 8
 296              		@ sp needed
 297 002c 10BD     		pop	{r4, pc}
 298              	.L22:
 299 002e 00BF     		.align	2
 300              	.L21:
 301 0030 00000000 		.word	.LANCHOR0
 302 0034 00000000 		.word	.LANCHOR1
 303 0038 00000000 		.word	rt_thread_idle_entry
 304 003c 00000000 		.word	.LC0
 305              		.cfi_endproc
 306              	.LFE18:
 308              		.section	.text.rt_thread_idle_gethandler,"ax",%progbits
 309              		.align	1
 310              		.global	rt_thread_idle_gethandler
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu softvfp
 316              	rt_thread_idle_gethandler:
 317              	.LFB19:
 271:RT-Thread/src/idle.c **** 
 272:RT-Thread/src/idle.c **** /**
 273:RT-Thread/src/idle.c ****  * @ingroup Thread
 274:RT-Thread/src/idle.c ****  *
 275:RT-Thread/src/idle.c ****  * This function will get the handler of the idle thread.
 276:RT-Thread/src/idle.c ****  *
 277:RT-Thread/src/idle.c ****  */
 278:RT-Thread/src/idle.c **** rt_thread_t rt_thread_idle_gethandler(void)
 279:RT-Thread/src/idle.c **** {
 318              		.loc 1 279 1 is_stmt 1 view -0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 280:RT-Thread/src/idle.c ****     return (rt_thread_t)(&idle);
 323              		.loc 1 280 5 view .LVU72
 281:RT-Thread/src/idle.c **** }
 324              		.loc 1 281 1 is_stmt 0 view .LVU73
 325 0000 0048     		ldr	r0, .L24
 326 0002 7047     		bx	lr
 327              	.L25:
 328              		.align	2
 329              	.L24:
 330 0004 00000000 		.word	.LANCHOR0
 331              		.cfi_endproc
 332              	.LFE19:
 334              		.section	.bss.idle,"aw",%nobits
 335              		.align	2
 336              		.set	.LANCHOR0,. + 0
 339              	idle:
 340 0000 00000000 		.space	132
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 14


 340      00000000 
 340      00000000 
 340      00000000 
 340      00000000 
 341              		.section	.bss.rt_thread_stack,"aw",%nobits
 342              		.align	2
 343              		.set	.LANCHOR1,. + 0
 346              	rt_thread_stack:
 347 0000 00000000 		.space	256
 347      00000000 
 347      00000000 
 347      00000000 
 347      00000000 
 348              		.text
 349              	.Letext0:
 350              		.file 3 "RT-Thread/include/rtdef.h"
 351              		.file 4 "RT-Thread/include/rtthread.h"
 352              		.file 5 "RT-Thread/include/rthw.h"
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s 			page 15


DEFINED SYMBOLS
                            *ABS*:00000000 idle.c
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:16     .text.rt_thread_idle_excute:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:24     .text.rt_thread_idle_excute:00000000 rt_thread_idle_excute
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:210    .text.rt_thread_idle_excute:00000080 $d
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:215    .text.rt_thread_idle_entry:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:221    .text.rt_thread_idle_entry:00000000 rt_thread_idle_entry
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:247    .rodata.rt_thread_idle_init.str1.4:00000000 $d
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:251    .text.rt_thread_idle_init:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:258    .text.rt_thread_idle_init:00000000 rt_thread_idle_init
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:301    .text.rt_thread_idle_init:00000030 $d
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:309    .text.rt_thread_idle_gethandler:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:316    .text.rt_thread_idle_gethandler:00000000 rt_thread_idle_gethandler
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:330    .text.rt_thread_idle_gethandler:00000004 $d
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:335    .bss.idle:00000000 $d
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:339    .bss.idle:00000000 idle
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:342    .bss.rt_thread_stack:00000000 $d
C:\Users\yzy\AppData\Local\Temp\ccdSnTRW.s:346    .bss.rt_thread_stack:00000000 rt_thread_stack

UNDEFINED SYMBOLS
rt_object_is_systemobject
rt_exit_critical
rt_hw_interrupt_enable
rt_free
rt_object_delete
rt_hw_interrupt_disable
rt_enter_critical
rt_object_detach
rt_thread_defunct
rt_thread_init
rt_thread_startup
