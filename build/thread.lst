ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"thread.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.rt_thread_exit,"ax",%progbits
  16              		.align	1
  17              		.global	rt_thread_exit
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	rt_thread_exit:
  25              	.LFB15:
  26              		.file 1 "RT-Thread/src/thread.c"
   1:RT-Thread/src/thread.c **** /*
   2:RT-Thread/src/thread.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:RT-Thread/src/thread.c ****  *
   4:RT-Thread/src/thread.c ****  * SPDX-License-Identifier: Apache-2.0
   5:RT-Thread/src/thread.c ****  *
   6:RT-Thread/src/thread.c ****  * Change Logs:
   7:RT-Thread/src/thread.c ****  * Date           Author       Notes
   8:RT-Thread/src/thread.c ****  * 2006-03-28     Bernard      first version
   9:RT-Thread/src/thread.c ****  * 2006-04-29     Bernard      implement thread timer
  10:RT-Thread/src/thread.c ****  * 2006-04-30     Bernard      added THREAD_DEBUG
  11:RT-Thread/src/thread.c ****  * 2006-05-27     Bernard      fixed the rt_thread_yield bug
  12:RT-Thread/src/thread.c ****  * 2006-06-03     Bernard      fixed the thread timer init bug
  13:RT-Thread/src/thread.c ****  * 2006-08-10     Bernard      fixed the timer bug in thread_sleep
  14:RT-Thread/src/thread.c ****  * 2006-09-03     Bernard      changed rt_timer_delete to rt_timer_detach
  15:RT-Thread/src/thread.c ****  * 2006-09-03     Bernard      implement rt_thread_detach
  16:RT-Thread/src/thread.c ****  * 2008-02-16     Bernard      fixed the rt_thread_timeout bug
  17:RT-Thread/src/thread.c ****  * 2010-03-21     Bernard      change the errno of rt_thread_delay/sleep to
  18:RT-Thread/src/thread.c ****  *                             RT_EOK.
  19:RT-Thread/src/thread.c ****  * 2010-11-10     Bernard      add cleanup callback function in thread exit.
  20:RT-Thread/src/thread.c ****  * 2011-09-01     Bernard      fixed rt_thread_exit issue when the current
  21:RT-Thread/src/thread.c ****  *                             thread preempted, which reported by Jiaxing Lee.
  22:RT-Thread/src/thread.c ****  * 2011-09-08     Bernard      fixed the scheduling issue in rt_thread_startup.
  23:RT-Thread/src/thread.c ****  * 2012-12-29     Bernard      fixed compiling warning.
  24:RT-Thread/src/thread.c ****  * 2016-08-09     ArdaFu       add thread suspend and resume hook.
  25:RT-Thread/src/thread.c ****  * 2017-04-10     armink       fixed the rt_thread_delete and rt_thread_detach
  26:RT-Thread/src/thread.c ****                                bug when thread has not startup.
  27:RT-Thread/src/thread.c ****  */
  28:RT-Thread/src/thread.c **** 
  29:RT-Thread/src/thread.c **** #include <rtthread.h>
  30:RT-Thread/src/thread.c **** #include <rthw.h>
  31:RT-Thread/src/thread.c **** 
  32:RT-Thread/src/thread.c **** extern rt_list_t rt_thread_priority_table[RT_THREAD_PRIORITY_MAX];
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 2


  33:RT-Thread/src/thread.c **** extern struct rt_thread *rt_current_thread;
  34:RT-Thread/src/thread.c **** extern rt_list_t rt_thread_defunct;
  35:RT-Thread/src/thread.c **** 
  36:RT-Thread/src/thread.c **** #ifdef RT_USING_HOOK
  37:RT-Thread/src/thread.c **** 
  38:RT-Thread/src/thread.c **** static void (*rt_thread_suspend_hook)(rt_thread_t thread);
  39:RT-Thread/src/thread.c **** static void (*rt_thread_resume_hook) (rt_thread_t thread);
  40:RT-Thread/src/thread.c **** static void (*rt_thread_inited_hook) (rt_thread_t thread);
  41:RT-Thread/src/thread.c **** 
  42:RT-Thread/src/thread.c **** /**
  43:RT-Thread/src/thread.c ****  * @ingroup Hook
  44:RT-Thread/src/thread.c ****  * This function sets a hook function when the system suspend a thread.
  45:RT-Thread/src/thread.c ****  *
  46:RT-Thread/src/thread.c ****  * @param hook the specified hook function
  47:RT-Thread/src/thread.c ****  *
  48:RT-Thread/src/thread.c ****  * @note the hook function must be simple and never be blocked or suspend.
  49:RT-Thread/src/thread.c ****  */
  50:RT-Thread/src/thread.c **** void rt_thread_suspend_sethook(void (*hook)(rt_thread_t thread))
  51:RT-Thread/src/thread.c **** {
  52:RT-Thread/src/thread.c ****     rt_thread_suspend_hook = hook;
  53:RT-Thread/src/thread.c **** }
  54:RT-Thread/src/thread.c **** 
  55:RT-Thread/src/thread.c **** /**
  56:RT-Thread/src/thread.c ****  * @ingroup Hook
  57:RT-Thread/src/thread.c ****  * This function sets a hook function when the system resume a thread.
  58:RT-Thread/src/thread.c ****  *
  59:RT-Thread/src/thread.c ****  * @param hook the specified hook function
  60:RT-Thread/src/thread.c ****  *
  61:RT-Thread/src/thread.c ****  * @note the hook function must be simple and never be blocked or suspend.
  62:RT-Thread/src/thread.c ****  */
  63:RT-Thread/src/thread.c **** void rt_thread_resume_sethook(void (*hook)(rt_thread_t thread))
  64:RT-Thread/src/thread.c **** {
  65:RT-Thread/src/thread.c ****     rt_thread_resume_hook = hook;
  66:RT-Thread/src/thread.c **** }
  67:RT-Thread/src/thread.c **** 
  68:RT-Thread/src/thread.c **** /**
  69:RT-Thread/src/thread.c ****  * @ingroup Hook
  70:RT-Thread/src/thread.c ****  * This function sets a hook function when a thread is initialized.
  71:RT-Thread/src/thread.c ****  *
  72:RT-Thread/src/thread.c ****  * @param hook the specified hook function
  73:RT-Thread/src/thread.c ****  */
  74:RT-Thread/src/thread.c **** void rt_thread_inited_sethook(void (*hook)(rt_thread_t thread))
  75:RT-Thread/src/thread.c **** {
  76:RT-Thread/src/thread.c ****     rt_thread_inited_hook = hook;
  77:RT-Thread/src/thread.c **** }
  78:RT-Thread/src/thread.c **** 
  79:RT-Thread/src/thread.c **** #endif
  80:RT-Thread/src/thread.c **** 
  81:RT-Thread/src/thread.c **** void rt_thread_exit(void)
  82:RT-Thread/src/thread.c **** {
  27              		.loc 1 82 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 38B5     		push	{r3, r4, r5, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 3


  34              		.cfi_offset 3, -16
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  83:RT-Thread/src/thread.c ****     struct rt_thread *thread;
  38              		.loc 1 83 5 view .LVU1
  84:RT-Thread/src/thread.c ****     register rt_base_t level;
  39              		.loc 1 84 5 view .LVU2
  85:RT-Thread/src/thread.c **** 
  86:RT-Thread/src/thread.c ****     /* get current thread */
  87:RT-Thread/src/thread.c ****     thread = rt_current_thread;
  40              		.loc 1 87 5 view .LVU3
  41              		.loc 1 87 12 is_stmt 0 view .LVU4
  42 0002 144B     		ldr	r3, .L6
  43 0004 1C68     		ldr	r4, [r3]
  44              	.LVL0:
  88:RT-Thread/src/thread.c **** 
  89:RT-Thread/src/thread.c ****     /* disable interrupt */
  90:RT-Thread/src/thread.c ****     level = rt_hw_interrupt_disable();
  45              		.loc 1 90 5 is_stmt 1 view .LVU5
  46              		.loc 1 90 13 is_stmt 0 view .LVU6
  47 0006 FFF7FEFF 		bl	rt_hw_interrupt_disable
  48              	.LVL1:
  49 000a 0546     		mov	r5, r0
  50              	.LVL2:
  91:RT-Thread/src/thread.c **** 
  92:RT-Thread/src/thread.c ****     /* remove from schedule */
  93:RT-Thread/src/thread.c ****     rt_schedule_remove_thread(thread);
  51              		.loc 1 93 5 is_stmt 1 view .LVU7
  52 000c 2046     		mov	r0, r4
  53              	.LVL3:
  54              		.loc 1 93 5 is_stmt 0 view .LVU8
  55 000e FFF7FEFF 		bl	rt_schedule_remove_thread
  56              	.LVL4:
  94:RT-Thread/src/thread.c ****     /* change stat */
  95:RT-Thread/src/thread.c ****     thread->stat = RT_THREAD_CLOSE;
  57              		.loc 1 95 5 is_stmt 1 view .LVU9
  58              		.loc 1 95 18 is_stmt 0 view .LVU10
  59 0012 0423     		movs	r3, #4
  60 0014 84F83430 		strb	r3, [r4, #52]
  96:RT-Thread/src/thread.c **** 
  97:RT-Thread/src/thread.c ****     /* remove it from timer list */
  98:RT-Thread/src/thread.c ****     rt_timer_detach(&thread->thread_timer);
  61              		.loc 1 98 5 is_stmt 1 view .LVU11
  62 0018 04F15000 		add	r0, r4, #80
  63 001c FFF7FEFF 		bl	rt_timer_detach
  64              	.LVL5:
  99:RT-Thread/src/thread.c **** 
 100:RT-Thread/src/thread.c ****     if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
  65              		.loc 1 100 5 view .LVU12
  66              		.loc 1 100 10 is_stmt 0 view .LVU13
  67 0020 2046     		mov	r0, r4
  68 0022 FFF7FEFF 		bl	rt_object_is_systemobject
  69              	.LVL6:
  70              		.loc 1 100 8 view .LVU14
  71 0026 0128     		cmp	r0, #1
  72 0028 0DD0     		beq	.L5
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 4


  73              	.L2:
 101:RT-Thread/src/thread.c ****         thread->cleanup == RT_NULL)
 102:RT-Thread/src/thread.c ****     {
 103:RT-Thread/src/thread.c ****         rt_object_detach((rt_object_t)thread);
 104:RT-Thread/src/thread.c ****     }
 105:RT-Thread/src/thread.c ****     else
 106:RT-Thread/src/thread.c ****     {
 107:RT-Thread/src/thread.c ****         /* insert to defunct thread list */
 108:RT-Thread/src/thread.c ****         rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
  74              		.loc 1 108 9 is_stmt 1 view .LVU15
  75 002a 04F11402 		add	r2, r4, #20
  76              	.LVL7:
  77              	.LBB18:
  78              	.LBI18:
  79              		.file 2 "RT-Thread/include/rtservice.h"
   1:RT-Thread/include/rtservice.h **** /*
   2:RT-Thread/include/rtservice.h ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:RT-Thread/include/rtservice.h ****  *
   4:RT-Thread/include/rtservice.h ****  * SPDX-License-Identifier: Apache-2.0
   5:RT-Thread/include/rtservice.h ****  *
   6:RT-Thread/include/rtservice.h ****  * Change Logs:
   7:RT-Thread/include/rtservice.h ****  * Date           Author       Notes
   8:RT-Thread/include/rtservice.h ****  * 2006-03-16     Bernard      the first version
   9:RT-Thread/include/rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  10:RT-Thread/include/rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  11:RT-Thread/include/rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  12:RT-Thread/include/rtservice.h ****  * 2017-11-15     JasonJia     Modify rt_slist_foreach to rt_slist_for_each_entry.
  13:RT-Thread/include/rtservice.h ****  *                             Make code cleanup.
  14:RT-Thread/include/rtservice.h ****  */
  15:RT-Thread/include/rtservice.h **** 
  16:RT-Thread/include/rtservice.h **** #ifndef __RT_SERVICE_H__
  17:RT-Thread/include/rtservice.h **** #define __RT_SERVICE_H__
  18:RT-Thread/include/rtservice.h **** 
  19:RT-Thread/include/rtservice.h **** #ifdef __cplusplus
  20:RT-Thread/include/rtservice.h **** extern "C" {
  21:RT-Thread/include/rtservice.h **** #endif
  22:RT-Thread/include/rtservice.h **** 
  23:RT-Thread/include/rtservice.h **** /**
  24:RT-Thread/include/rtservice.h ****  * @addtogroup KernelService
  25:RT-Thread/include/rtservice.h ****  */
  26:RT-Thread/include/rtservice.h **** 
  27:RT-Thread/include/rtservice.h **** /**@{*/
  28:RT-Thread/include/rtservice.h **** 
  29:RT-Thread/include/rtservice.h **** /**
  30:RT-Thread/include/rtservice.h ****  * rt_container_of - return the member address of ptr, if the type of ptr is the
  31:RT-Thread/include/rtservice.h ****  * struct type.
  32:RT-Thread/include/rtservice.h ****  */
  33:RT-Thread/include/rtservice.h **** #define rt_container_of(ptr, type, member) \
  34:RT-Thread/include/rtservice.h ****     ((type *)((char *)(ptr) - (unsigned long)(&((type *)0)->member)))
  35:RT-Thread/include/rtservice.h **** 
  36:RT-Thread/include/rtservice.h **** 
  37:RT-Thread/include/rtservice.h **** /**
  38:RT-Thread/include/rtservice.h ****  * @brief initialize a list object
  39:RT-Thread/include/rtservice.h ****  */
  40:RT-Thread/include/rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  41:RT-Thread/include/rtservice.h **** 
  42:RT-Thread/include/rtservice.h **** /**
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 5


  43:RT-Thread/include/rtservice.h ****  * @brief initialize a list
  44:RT-Thread/include/rtservice.h ****  *
  45:RT-Thread/include/rtservice.h ****  * @param l list to be initialized
  46:RT-Thread/include/rtservice.h ****  */
  47:RT-Thread/include/rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
  48:RT-Thread/include/rtservice.h **** {
  49:RT-Thread/include/rtservice.h ****     l->next = l->prev = l;
  50:RT-Thread/include/rtservice.h **** }
  51:RT-Thread/include/rtservice.h **** 
  52:RT-Thread/include/rtservice.h **** /**
  53:RT-Thread/include/rtservice.h ****  * @brief insert a node after a list
  54:RT-Thread/include/rtservice.h ****  *
  55:RT-Thread/include/rtservice.h ****  * @param l list to insert it
  56:RT-Thread/include/rtservice.h ****  * @param n new node to be inserted
  57:RT-Thread/include/rtservice.h ****  */
  58:RT-Thread/include/rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
  80              		.loc 2 58 16 view .LVU16
  81              	.LBB19:
  59:RT-Thread/include/rtservice.h **** {
  60:RT-Thread/include/rtservice.h ****     l->next->prev = n;
  82              		.loc 2 60 5 view .LVU17
  83              		.loc 2 60 6 is_stmt 0 view .LVU18
  84 002e 0A4B     		ldr	r3, .L6+4
  85 0030 1968     		ldr	r1, [r3]
  86              		.loc 2 60 19 view .LVU19
  87 0032 4A60     		str	r2, [r1, #4]
  61:RT-Thread/include/rtservice.h ****     n->next = l->next;
  88              		.loc 2 61 5 is_stmt 1 view .LVU20
  89              		.loc 2 61 13 is_stmt 0 view .LVU21
  90 0034 6161     		str	r1, [r4, #20]
  62:RT-Thread/include/rtservice.h **** 
  63:RT-Thread/include/rtservice.h ****     l->next = n;
  91              		.loc 2 63 5 is_stmt 1 view .LVU22
  92              		.loc 2 63 13 is_stmt 0 view .LVU23
  93 0036 1A60     		str	r2, [r3]
  64:RT-Thread/include/rtservice.h ****     n->prev = l;
  94              		.loc 2 64 5 is_stmt 1 view .LVU24
  95              		.loc 2 64 13 is_stmt 0 view .LVU25
  96 0038 A361     		str	r3, [r4, #24]
  97              	.LVL8:
  98              	.L3:
  99              		.loc 2 64 13 view .LVU26
 100              	.LBE19:
 101              	.LBE18:
 109:RT-Thread/src/thread.c ****     }
 110:RT-Thread/src/thread.c **** 
 111:RT-Thread/src/thread.c ****     /* enable interrupt */
 112:RT-Thread/src/thread.c ****     rt_hw_interrupt_enable(level);
 102              		.loc 1 112 5 is_stmt 1 view .LVU27
 103 003a 2846     		mov	r0, r5
 104 003c FFF7FEFF 		bl	rt_hw_interrupt_enable
 105              	.LVL9:
 113:RT-Thread/src/thread.c **** 
 114:RT-Thread/src/thread.c ****     /* switch to next task */
 115:RT-Thread/src/thread.c ****     rt_schedule();
 106              		.loc 1 115 5 view .LVU28
 107 0040 FFF7FEFF 		bl	rt_schedule
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 6


 108              	.LVL10:
 116:RT-Thread/src/thread.c **** }
 109              		.loc 1 116 1 is_stmt 0 view .LVU29
 110 0044 38BD     		pop	{r3, r4, r5, pc}
 111              	.LVL11:
 112              	.L5:
 101:RT-Thread/src/thread.c ****     {
 113              		.loc 1 101 15 discriminator 1 view .LVU30
 114 0046 E36F     		ldr	r3, [r4, #124]
 100:RT-Thread/src/thread.c ****         thread->cleanup == RT_NULL)
 115              		.loc 1 100 69 discriminator 1 view .LVU31
 116 0048 002B     		cmp	r3, #0
 117 004a EED1     		bne	.L2
 103:RT-Thread/src/thread.c ****     }
 118              		.loc 1 103 9 is_stmt 1 view .LVU32
 119 004c 2046     		mov	r0, r4
 120 004e FFF7FEFF 		bl	rt_object_detach
 121              	.LVL12:
 122 0052 F2E7     		b	.L3
 123              	.L7:
 124              		.align	2
 125              	.L6:
 126 0054 00000000 		.word	rt_current_thread
 127 0058 00000000 		.word	rt_thread_defunct
 128              		.cfi_endproc
 129              	.LFE15:
 131              		.section	.text._rt_thread_init,"ax",%progbits
 132              		.align	1
 133              		.syntax unified
 134              		.thumb
 135              		.thumb_func
 136              		.fpu softvfp
 138              	_rt_thread_init:
 139              	.LVL13:
 140              	.LFB16:
 117:RT-Thread/src/thread.c **** 
 118:RT-Thread/src/thread.c **** static rt_err_t _rt_thread_init(struct rt_thread *thread,
 119:RT-Thread/src/thread.c ****                                 const char       *name,
 120:RT-Thread/src/thread.c ****                                 void (*entry)(void *parameter),
 121:RT-Thread/src/thread.c ****                                 void             *parameter,
 122:RT-Thread/src/thread.c ****                                 void             *stack_start,
 123:RT-Thread/src/thread.c ****                                 rt_uint32_t       stack_size,
 124:RT-Thread/src/thread.c ****                                 rt_uint8_t        priority,
 125:RT-Thread/src/thread.c ****                                 rt_uint32_t       tick)
 126:RT-Thread/src/thread.c **** {
 141              		.loc 1 126 1 view -0
 142              		.cfi_startproc
 143              		@ args = 16, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		.loc 1 126 1 is_stmt 0 view .LVU34
 146 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 147              	.LCFI1:
 148              		.cfi_def_cfa_offset 20
 149              		.cfi_offset 4, -20
 150              		.cfi_offset 5, -16
 151              		.cfi_offset 6, -12
 152              		.cfi_offset 7, -8
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 7


 153              		.cfi_offset 14, -4
 154 0002 83B0     		sub	sp, sp, #12
 155              	.LCFI2:
 156              		.cfi_def_cfa_offset 32
 157 0004 0446     		mov	r4, r0
 158 0006 1746     		mov	r7, r2
 159 0008 0898     		ldr	r0, [sp, #32]
 160              	.LVL14:
 161              		.loc 1 126 1 view .LVU35
 162 000a 099A     		ldr	r2, [sp, #36]
 163              	.LVL15:
 164              		.loc 1 126 1 view .LVU36
 165 000c 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 166 0010 0B9E     		ldr	r6, [sp, #44]
 127:RT-Thread/src/thread.c ****     /* init thread list */
 128:RT-Thread/src/thread.c ****     rt_list_init(&(thread->tlist));
 167              		.loc 1 128 5 is_stmt 1 view .LVU37
 168 0012 04F11401 		add	r1, r4, #20
 169              	.LVL16:
 170              	.LBB20:
 171              	.LBI20:
  47:RT-Thread/include/rtservice.h **** {
 172              		.loc 2 47 16 view .LVU38
 173              	.LBB21:
  49:RT-Thread/include/rtservice.h **** }
 174              		.loc 2 49 5 view .LVU39
  49:RT-Thread/include/rtservice.h **** }
 175              		.loc 2 49 23 is_stmt 0 view .LVU40
 176 0016 A161     		str	r1, [r4, #24]
  49:RT-Thread/include/rtservice.h **** }
 177              		.loc 2 49 13 view .LVU41
 178 0018 6161     		str	r1, [r4, #20]
 179              	.LVL17:
  49:RT-Thread/include/rtservice.h **** }
 180              		.loc 2 49 13 view .LVU42
 181              	.LBE21:
 182              	.LBE20:
 129:RT-Thread/src/thread.c **** 
 130:RT-Thread/src/thread.c ****     thread->entry = (void *)entry;
 183              		.loc 1 130 5 is_stmt 1 view .LVU43
 184              		.loc 1 130 19 is_stmt 0 view .LVU44
 185 001a 2762     		str	r7, [r4, #32]
 131:RT-Thread/src/thread.c ****     thread->parameter = parameter;
 186              		.loc 1 131 5 is_stmt 1 view .LVU45
 187              		.loc 1 131 23 is_stmt 0 view .LVU46
 188 001c 6362     		str	r3, [r4, #36]
 132:RT-Thread/src/thread.c **** 
 133:RT-Thread/src/thread.c ****     /* stack init */
 134:RT-Thread/src/thread.c ****     thread->stack_addr = stack_start;
 189              		.loc 1 134 5 is_stmt 1 view .LVU47
 190              		.loc 1 134 24 is_stmt 0 view .LVU48
 191 001e A062     		str	r0, [r4, #40]
 135:RT-Thread/src/thread.c ****     thread->stack_size = stack_size;
 192              		.loc 1 135 5 is_stmt 1 view .LVU49
 193              		.loc 1 135 24 is_stmt 0 view .LVU50
 194 0020 E262     		str	r2, [r4, #44]
 136:RT-Thread/src/thread.c **** 
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 8


 137:RT-Thread/src/thread.c ****     /* init thread stack */
 138:RT-Thread/src/thread.c ****     rt_memset(thread->stack_addr, '#', thread->stack_size);
 195              		.loc 1 138 5 is_stmt 1 view .LVU51
 196 0022 2321     		movs	r1, #35
 197 0024 FFF7FEFF 		bl	rt_memset
 198              	.LVL18:
 139:RT-Thread/src/thread.c **** #ifdef ARCH_CPU_STACK_GROWS_UPWARD
 140:RT-Thread/src/thread.c ****     thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
 141:RT-Thread/src/thread.c ****                                           (void *)((char *)thread->stack_addr),
 142:RT-Thread/src/thread.c ****                                           (void *)rt_thread_exit);
 143:RT-Thread/src/thread.c **** #else
 144:RT-Thread/src/thread.c ****     thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
 199              		.loc 1 144 5 view .LVU52
 145:RT-Thread/src/thread.c ****                                           (void *)((char *)thread->stack_addr + thread->stack_size 
 200              		.loc 1 145 66 is_stmt 0 view .LVU53
 201 0028 A16A     		ldr	r1, [r4, #40]
 202              		.loc 1 145 87 view .LVU54
 203 002a E36A     		ldr	r3, [r4, #44]
 204              		.loc 1 145 100 view .LVU55
 205 002c 1A1F     		subs	r2, r3, #4
 144:RT-Thread/src/thread.c ****                                           (void *)((char *)thread->stack_addr + thread->stack_size 
 206              		.loc 1 144 26 view .LVU56
 207 002e 124B     		ldr	r3, .L10
 208 0030 0A44     		add	r2, r2, r1
 209 0032 616A     		ldr	r1, [r4, #36]
 210 0034 206A     		ldr	r0, [r4, #32]
 211 0036 FFF7FEFF 		bl	rt_hw_stack_init
 212              	.LVL19:
 144:RT-Thread/src/thread.c ****                                           (void *)((char *)thread->stack_addr + thread->stack_size 
 213              		.loc 1 144 16 view .LVU57
 214 003a E061     		str	r0, [r4, #28]
 146:RT-Thread/src/thread.c ****                                           (void *)rt_thread_exit);
 147:RT-Thread/src/thread.c **** #endif
 148:RT-Thread/src/thread.c **** 
 149:RT-Thread/src/thread.c ****     /* priority init */
 150:RT-Thread/src/thread.c ****     RT_ASSERT(priority < RT_THREAD_PRIORITY_MAX);
 215              		.loc 1 150 49 is_stmt 1 view .LVU58
 151:RT-Thread/src/thread.c ****     thread->init_priority    = priority;
 216              		.loc 1 151 5 view .LVU59
 217              		.loc 1 151 30 is_stmt 0 view .LVU60
 218 003c 84F83650 		strb	r5, [r4, #54]
 152:RT-Thread/src/thread.c ****     thread->current_priority = priority;
 219              		.loc 1 152 5 is_stmt 1 view .LVU61
 220              		.loc 1 152 30 is_stmt 0 view .LVU62
 221 0040 84F83550 		strb	r5, [r4, #53]
 153:RT-Thread/src/thread.c **** 
 154:RT-Thread/src/thread.c ****     thread->number_mask = 0;
 222              		.loc 1 154 5 is_stmt 1 view .LVU63
 223              		.loc 1 154 25 is_stmt 0 view .LVU64
 224 0044 0025     		movs	r5, #0
 225 0046 E563     		str	r5, [r4, #60]
 155:RT-Thread/src/thread.c **** #if RT_THREAD_PRIORITY_MAX > 32
 156:RT-Thread/src/thread.c ****     thread->number = 0;
 226              		.loc 1 156 5 is_stmt 1 view .LVU65
 227              		.loc 1 156 20 is_stmt 0 view .LVU66
 228 0048 84F83750 		strb	r5, [r4, #55]
 157:RT-Thread/src/thread.c ****     thread->high_mask = 0;
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 9


 229              		.loc 1 157 5 is_stmt 1 view .LVU67
 230              		.loc 1 157 23 is_stmt 0 view .LVU68
 231 004c 84F83850 		strb	r5, [r4, #56]
 158:RT-Thread/src/thread.c **** #endif
 159:RT-Thread/src/thread.c **** 
 160:RT-Thread/src/thread.c ****     /* tick init */
 161:RT-Thread/src/thread.c ****     thread->init_tick      = tick;
 232              		.loc 1 161 5 is_stmt 1 view .LVU69
 233              		.loc 1 161 28 is_stmt 0 view .LVU70
 234 0050 A664     		str	r6, [r4, #72]
 162:RT-Thread/src/thread.c ****     thread->remaining_tick = tick;
 235              		.loc 1 162 5 is_stmt 1 view .LVU71
 236              		.loc 1 162 28 is_stmt 0 view .LVU72
 237 0052 E664     		str	r6, [r4, #76]
 163:RT-Thread/src/thread.c **** 
 164:RT-Thread/src/thread.c ****     /* error and flags */
 165:RT-Thread/src/thread.c ****     thread->error = RT_EOK;
 238              		.loc 1 165 5 is_stmt 1 view .LVU73
 239              		.loc 1 165 19 is_stmt 0 view .LVU74
 240 0054 2563     		str	r5, [r4, #48]
 166:RT-Thread/src/thread.c ****     thread->stat  = RT_THREAD_INIT;
 241              		.loc 1 166 5 is_stmt 1 view .LVU75
 242              		.loc 1 166 19 is_stmt 0 view .LVU76
 243 0056 84F83450 		strb	r5, [r4, #52]
 167:RT-Thread/src/thread.c **** 
 168:RT-Thread/src/thread.c ****     /* initialize cleanup function and user data */
 169:RT-Thread/src/thread.c ****     thread->cleanup   = 0;
 244              		.loc 1 169 5 is_stmt 1 view .LVU77
 245              		.loc 1 169 23 is_stmt 0 view .LVU78
 246 005a E567     		str	r5, [r4, #124]
 170:RT-Thread/src/thread.c ****     thread->user_data = 0;
 247              		.loc 1 170 5 is_stmt 1 view .LVU79
 248              		.loc 1 170 23 is_stmt 0 view .LVU80
 249 005c C4F88050 		str	r5, [r4, #128]
 171:RT-Thread/src/thread.c **** 
 172:RT-Thread/src/thread.c ****     /* init thread timer */
 173:RT-Thread/src/thread.c ****     rt_timer_init(&(thread->thread_timer),
 250              		.loc 1 173 5 is_stmt 1 view .LVU81
 251 0060 0195     		str	r5, [sp, #4]
 252 0062 0095     		str	r5, [sp]
 253 0064 2346     		mov	r3, r4
 254 0066 054A     		ldr	r2, .L10+4
 255 0068 2146     		mov	r1, r4
 256 006a 04F15000 		add	r0, r4, #80
 257 006e FFF7FEFF 		bl	rt_timer_init
 258              	.LVL20:
 174:RT-Thread/src/thread.c ****                   thread->name,
 175:RT-Thread/src/thread.c ****                   rt_thread_timeout,
 176:RT-Thread/src/thread.c ****                   thread,
 177:RT-Thread/src/thread.c ****                   0,
 178:RT-Thread/src/thread.c ****                   RT_TIMER_FLAG_ONE_SHOT);
 179:RT-Thread/src/thread.c **** 
 180:RT-Thread/src/thread.c ****     /* initialize signal */
 181:RT-Thread/src/thread.c **** #ifdef RT_USING_SIGNALS
 182:RT-Thread/src/thread.c ****     thread->sig_mask    = 0x00;
 183:RT-Thread/src/thread.c ****     thread->sig_pending = 0x00;
 184:RT-Thread/src/thread.c **** 
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 10


 185:RT-Thread/src/thread.c ****     thread->sig_ret     = RT_NULL;
 186:RT-Thread/src/thread.c ****     thread->sig_vectors = RT_NULL;
 187:RT-Thread/src/thread.c ****     thread->si_list     = RT_NULL;
 188:RT-Thread/src/thread.c **** #endif
 189:RT-Thread/src/thread.c **** 
 190:RT-Thread/src/thread.c **** #ifdef RT_USING_LWP
 191:RT-Thread/src/thread.c ****     thread->lwp = RT_NULL;
 192:RT-Thread/src/thread.c **** #endif
 193:RT-Thread/src/thread.c **** 
 194:RT-Thread/src/thread.c ****     RT_OBJECT_HOOK_CALL(rt_thread_inited_hook, (thread));
 259              		.loc 1 194 57 view .LVU82
 195:RT-Thread/src/thread.c **** 
 196:RT-Thread/src/thread.c ****     return RT_EOK;
 260              		.loc 1 196 5 view .LVU83
 197:RT-Thread/src/thread.c **** }
 261              		.loc 1 197 1 is_stmt 0 view .LVU84
 262 0072 2846     		mov	r0, r5
 263 0074 03B0     		add	sp, sp, #12
 264              	.LCFI3:
 265              		.cfi_def_cfa_offset 20
 266              		@ sp needed
 267 0076 F0BD     		pop	{r4, r5, r6, r7, pc}
 268              	.LVL21:
 269              	.L11:
 270              		.loc 1 197 1 view .LVU85
 271              		.align	2
 272              	.L10:
 273 0078 00000000 		.word	rt_thread_exit
 274 007c 00000000 		.word	rt_thread_timeout
 275              		.cfi_endproc
 276              	.LFE16:
 278              		.section	.text.rt_thread_timeout,"ax",%progbits
 279              		.align	1
 280              		.global	rt_thread_timeout
 281              		.syntax unified
 282              		.thumb
 283              		.thumb_func
 284              		.fpu softvfp
 286              	rt_thread_timeout:
 287              	.LVL22:
 288              	.LFB30:
 198:RT-Thread/src/thread.c **** 
 199:RT-Thread/src/thread.c **** /**
 200:RT-Thread/src/thread.c ****  * @addtogroup Thread
 201:RT-Thread/src/thread.c ****  */
 202:RT-Thread/src/thread.c **** 
 203:RT-Thread/src/thread.c **** /**@{*/
 204:RT-Thread/src/thread.c **** 
 205:RT-Thread/src/thread.c **** /**
 206:RT-Thread/src/thread.c ****  * This function will initialize a thread, normally it's used to initialize a
 207:RT-Thread/src/thread.c ****  * static thread object.
 208:RT-Thread/src/thread.c ****  *
 209:RT-Thread/src/thread.c ****  * @param thread the static thread object
 210:RT-Thread/src/thread.c ****  * @param name the name of thread, which shall be unique
 211:RT-Thread/src/thread.c ****  * @param entry the entry function of thread
 212:RT-Thread/src/thread.c ****  * @param parameter the parameter of thread enter function
 213:RT-Thread/src/thread.c ****  * @param stack_start the start address of thread stack
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 11


 214:RT-Thread/src/thread.c ****  * @param stack_size the size of thread stack
 215:RT-Thread/src/thread.c ****  * @param priority the priority of thread
 216:RT-Thread/src/thread.c ****  * @param tick the time slice if there are same priority thread
 217:RT-Thread/src/thread.c ****  *
 218:RT-Thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 219:RT-Thread/src/thread.c ****  */
 220:RT-Thread/src/thread.c **** rt_err_t rt_thread_init(struct rt_thread *thread,
 221:RT-Thread/src/thread.c ****                         const char       *name,
 222:RT-Thread/src/thread.c ****                         void (*entry)(void *parameter),
 223:RT-Thread/src/thread.c ****                         void             *parameter,
 224:RT-Thread/src/thread.c ****                         void             *stack_start,
 225:RT-Thread/src/thread.c ****                         rt_uint32_t       stack_size,
 226:RT-Thread/src/thread.c ****                         rt_uint8_t        priority,
 227:RT-Thread/src/thread.c ****                         rt_uint32_t       tick)
 228:RT-Thread/src/thread.c **** {
 229:RT-Thread/src/thread.c ****     /* thread check */
 230:RT-Thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 231:RT-Thread/src/thread.c ****     RT_ASSERT(stack_start != RT_NULL);
 232:RT-Thread/src/thread.c **** 
 233:RT-Thread/src/thread.c ****     /* init thread object */
 234:RT-Thread/src/thread.c ****     rt_object_init((rt_object_t)thread, RT_Object_Class_Thread, name);
 235:RT-Thread/src/thread.c **** 
 236:RT-Thread/src/thread.c ****     return _rt_thread_init(thread,
 237:RT-Thread/src/thread.c ****                            name,
 238:RT-Thread/src/thread.c ****                            entry,
 239:RT-Thread/src/thread.c ****                            parameter,
 240:RT-Thread/src/thread.c ****                            stack_start,
 241:RT-Thread/src/thread.c ****                            stack_size,
 242:RT-Thread/src/thread.c ****                            priority,
 243:RT-Thread/src/thread.c ****                            tick);
 244:RT-Thread/src/thread.c **** }
 245:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_init);
 246:RT-Thread/src/thread.c **** 
 247:RT-Thread/src/thread.c **** /**
 248:RT-Thread/src/thread.c ****  * This function will return self thread object
 249:RT-Thread/src/thread.c ****  *
 250:RT-Thread/src/thread.c ****  * @return the self thread object
 251:RT-Thread/src/thread.c ****  */
 252:RT-Thread/src/thread.c **** rt_thread_t rt_thread_self(void)
 253:RT-Thread/src/thread.c **** {
 254:RT-Thread/src/thread.c ****     return rt_current_thread;
 255:RT-Thread/src/thread.c **** }
 256:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_self);
 257:RT-Thread/src/thread.c **** 
 258:RT-Thread/src/thread.c **** /**
 259:RT-Thread/src/thread.c ****  * This function will start a thread and put it to system ready queue
 260:RT-Thread/src/thread.c ****  *
 261:RT-Thread/src/thread.c ****  * @param thread the thread to be started
 262:RT-Thread/src/thread.c ****  *
 263:RT-Thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 264:RT-Thread/src/thread.c ****  */
 265:RT-Thread/src/thread.c **** rt_err_t rt_thread_startup(rt_thread_t thread)
 266:RT-Thread/src/thread.c **** {
 267:RT-Thread/src/thread.c ****     /* thread check */
 268:RT-Thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 269:RT-Thread/src/thread.c ****     RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_INIT);
 270:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 12


 271:RT-Thread/src/thread.c **** 
 272:RT-Thread/src/thread.c ****     /* set current priority to init priority */
 273:RT-Thread/src/thread.c ****     thread->current_priority = thread->init_priority;
 274:RT-Thread/src/thread.c **** 
 275:RT-Thread/src/thread.c ****     /* calculate priority attribute */
 276:RT-Thread/src/thread.c **** #if RT_THREAD_PRIORITY_MAX > 32
 277:RT-Thread/src/thread.c ****     thread->number      = thread->current_priority >> 3;            /* 5bit */
 278:RT-Thread/src/thread.c ****     thread->number_mask = 1L << thread->number;
 279:RT-Thread/src/thread.c ****     thread->high_mask   = 1L << (thread->current_priority & 0x07);  /* 3bit */
 280:RT-Thread/src/thread.c **** #else
 281:RT-Thread/src/thread.c ****     thread->number_mask = 1L << thread->current_priority;
 282:RT-Thread/src/thread.c **** #endif
 283:RT-Thread/src/thread.c **** 
 284:RT-Thread/src/thread.c ****     RT_DEBUG_LOG(RT_DEBUG_THREAD, ("startup a thread:%s with priority:%d\n",
 285:RT-Thread/src/thread.c ****                                    thread->name, thread->init_priority));
 286:RT-Thread/src/thread.c ****     /* change thread stat */
 287:RT-Thread/src/thread.c ****     thread->stat = RT_THREAD_SUSPEND;
 288:RT-Thread/src/thread.c ****     /* then resume it */
 289:RT-Thread/src/thread.c ****     rt_thread_resume(thread);
 290:RT-Thread/src/thread.c ****     if (rt_thread_self() != RT_NULL)
 291:RT-Thread/src/thread.c ****     {
 292:RT-Thread/src/thread.c ****         /* do a scheduling */
 293:RT-Thread/src/thread.c ****         rt_schedule();
 294:RT-Thread/src/thread.c ****     }
 295:RT-Thread/src/thread.c **** 
 296:RT-Thread/src/thread.c ****     return RT_EOK;
 297:RT-Thread/src/thread.c **** }
 298:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_startup);
 299:RT-Thread/src/thread.c **** 
 300:RT-Thread/src/thread.c **** /**
 301:RT-Thread/src/thread.c ****  * This function will detach a thread. The thread object will be removed from
 302:RT-Thread/src/thread.c ****  * thread queue and detached/deleted from system object management.
 303:RT-Thread/src/thread.c ****  *
 304:RT-Thread/src/thread.c ****  * @param thread the thread to be deleted
 305:RT-Thread/src/thread.c ****  *
 306:RT-Thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 307:RT-Thread/src/thread.c ****  */
 308:RT-Thread/src/thread.c **** rt_err_t rt_thread_detach(rt_thread_t thread)
 309:RT-Thread/src/thread.c **** {
 310:RT-Thread/src/thread.c ****     rt_base_t lock;
 311:RT-Thread/src/thread.c **** 
 312:RT-Thread/src/thread.c ****     /* thread check */
 313:RT-Thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 314:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 315:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread));
 316:RT-Thread/src/thread.c **** 
 317:RT-Thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
 318:RT-Thread/src/thread.c ****     {
 319:RT-Thread/src/thread.c ****         /* remove from schedule */
 320:RT-Thread/src/thread.c ****         rt_schedule_remove_thread(thread);
 321:RT-Thread/src/thread.c ****     }
 322:RT-Thread/src/thread.c **** 
 323:RT-Thread/src/thread.c ****     /* release thread timer */
 324:RT-Thread/src/thread.c ****     rt_timer_detach(&(thread->thread_timer));
 325:RT-Thread/src/thread.c **** 
 326:RT-Thread/src/thread.c ****     /* change stat */
 327:RT-Thread/src/thread.c ****     thread->stat = RT_THREAD_CLOSE;
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 13


 328:RT-Thread/src/thread.c **** 
 329:RT-Thread/src/thread.c ****     if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
 330:RT-Thread/src/thread.c ****         thread->cleanup == RT_NULL)
 331:RT-Thread/src/thread.c ****     {
 332:RT-Thread/src/thread.c ****         rt_object_detach((rt_object_t)thread);
 333:RT-Thread/src/thread.c ****     }
 334:RT-Thread/src/thread.c ****     else
 335:RT-Thread/src/thread.c ****     {
 336:RT-Thread/src/thread.c ****         /* disable interrupt */
 337:RT-Thread/src/thread.c ****         lock = rt_hw_interrupt_disable();
 338:RT-Thread/src/thread.c ****         /* insert to defunct thread list */
 339:RT-Thread/src/thread.c ****         rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
 340:RT-Thread/src/thread.c ****         /* enable interrupt */
 341:RT-Thread/src/thread.c ****         rt_hw_interrupt_enable(lock);
 342:RT-Thread/src/thread.c ****     }
 343:RT-Thread/src/thread.c **** 
 344:RT-Thread/src/thread.c ****     return RT_EOK;
 345:RT-Thread/src/thread.c **** }
 346:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_detach);
 347:RT-Thread/src/thread.c **** 
 348:RT-Thread/src/thread.c **** #ifdef RT_USING_HEAP
 349:RT-Thread/src/thread.c **** /**
 350:RT-Thread/src/thread.c ****  * This function will create a thread object and allocate thread object memory
 351:RT-Thread/src/thread.c ****  * and stack.
 352:RT-Thread/src/thread.c ****  *
 353:RT-Thread/src/thread.c ****  * @param name the name of thread, which shall be unique
 354:RT-Thread/src/thread.c ****  * @param entry the entry function of thread
 355:RT-Thread/src/thread.c ****  * @param parameter the parameter of thread enter function
 356:RT-Thread/src/thread.c ****  * @param stack_size the size of thread stack
 357:RT-Thread/src/thread.c ****  * @param priority the priority of thread
 358:RT-Thread/src/thread.c ****  * @param tick the time slice if there are same priority thread
 359:RT-Thread/src/thread.c ****  *
 360:RT-Thread/src/thread.c ****  * @return the created thread object
 361:RT-Thread/src/thread.c ****  */
 362:RT-Thread/src/thread.c **** rt_thread_t rt_thread_create(const char *name,
 363:RT-Thread/src/thread.c ****                              void (*entry)(void *parameter),
 364:RT-Thread/src/thread.c ****                              void       *parameter,
 365:RT-Thread/src/thread.c ****                              rt_uint32_t stack_size,
 366:RT-Thread/src/thread.c ****                              rt_uint8_t  priority,
 367:RT-Thread/src/thread.c ****                              rt_uint32_t tick)
 368:RT-Thread/src/thread.c **** {
 369:RT-Thread/src/thread.c ****     struct rt_thread *thread;
 370:RT-Thread/src/thread.c ****     void *stack_start;
 371:RT-Thread/src/thread.c **** 
 372:RT-Thread/src/thread.c ****     thread = (struct rt_thread *)rt_object_allocate(RT_Object_Class_Thread,
 373:RT-Thread/src/thread.c ****                                                     name);
 374:RT-Thread/src/thread.c ****     if (thread == RT_NULL)
 375:RT-Thread/src/thread.c ****         return RT_NULL;
 376:RT-Thread/src/thread.c **** 
 377:RT-Thread/src/thread.c ****     stack_start = (void *)RT_KERNEL_MALLOC(stack_size);
 378:RT-Thread/src/thread.c ****     if (stack_start == RT_NULL)
 379:RT-Thread/src/thread.c ****     {
 380:RT-Thread/src/thread.c ****         /* allocate stack failure */
 381:RT-Thread/src/thread.c ****         rt_object_delete((rt_object_t)thread);
 382:RT-Thread/src/thread.c **** 
 383:RT-Thread/src/thread.c ****         return RT_NULL;
 384:RT-Thread/src/thread.c ****     }
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 14


 385:RT-Thread/src/thread.c **** 
 386:RT-Thread/src/thread.c ****     _rt_thread_init(thread,
 387:RT-Thread/src/thread.c ****                     name,
 388:RT-Thread/src/thread.c ****                     entry,
 389:RT-Thread/src/thread.c ****                     parameter,
 390:RT-Thread/src/thread.c ****                     stack_start,
 391:RT-Thread/src/thread.c ****                     stack_size,
 392:RT-Thread/src/thread.c ****                     priority,
 393:RT-Thread/src/thread.c ****                     tick);
 394:RT-Thread/src/thread.c **** 
 395:RT-Thread/src/thread.c ****     return thread;
 396:RT-Thread/src/thread.c **** }
 397:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_create);
 398:RT-Thread/src/thread.c **** 
 399:RT-Thread/src/thread.c **** /**
 400:RT-Thread/src/thread.c ****  * This function will delete a thread. The thread object will be removed from
 401:RT-Thread/src/thread.c ****  * thread queue and deleted from system object management in the idle thread.
 402:RT-Thread/src/thread.c ****  *
 403:RT-Thread/src/thread.c ****  * @param thread the thread to be deleted
 404:RT-Thread/src/thread.c ****  *
 405:RT-Thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 406:RT-Thread/src/thread.c ****  */
 407:RT-Thread/src/thread.c **** rt_err_t rt_thread_delete(rt_thread_t thread)
 408:RT-Thread/src/thread.c **** {
 409:RT-Thread/src/thread.c ****     rt_base_t lock;
 410:RT-Thread/src/thread.c **** 
 411:RT-Thread/src/thread.c ****     /* thread check */
 412:RT-Thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 413:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 414:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread) == RT_FALSE);
 415:RT-Thread/src/thread.c **** 
 416:RT-Thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
 417:RT-Thread/src/thread.c ****     {
 418:RT-Thread/src/thread.c ****         /* remove from schedule */
 419:RT-Thread/src/thread.c ****         rt_schedule_remove_thread(thread);
 420:RT-Thread/src/thread.c ****     }
 421:RT-Thread/src/thread.c **** 
 422:RT-Thread/src/thread.c ****     /* release thread timer */
 423:RT-Thread/src/thread.c ****     rt_timer_detach(&(thread->thread_timer));
 424:RT-Thread/src/thread.c **** 
 425:RT-Thread/src/thread.c ****     /* change stat */
 426:RT-Thread/src/thread.c ****     thread->stat = RT_THREAD_CLOSE;
 427:RT-Thread/src/thread.c **** 
 428:RT-Thread/src/thread.c ****     /* disable interrupt */
 429:RT-Thread/src/thread.c ****     lock = rt_hw_interrupt_disable();
 430:RT-Thread/src/thread.c **** 
 431:RT-Thread/src/thread.c ****     /* insert to defunct thread list */
 432:RT-Thread/src/thread.c ****     rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
 433:RT-Thread/src/thread.c **** 
 434:RT-Thread/src/thread.c ****     /* enable interrupt */
 435:RT-Thread/src/thread.c ****     rt_hw_interrupt_enable(lock);
 436:RT-Thread/src/thread.c **** 
 437:RT-Thread/src/thread.c ****     return RT_EOK;
 438:RT-Thread/src/thread.c **** }
 439:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_delete);
 440:RT-Thread/src/thread.c **** #endif
 441:RT-Thread/src/thread.c **** 
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 15


 442:RT-Thread/src/thread.c **** /**
 443:RT-Thread/src/thread.c ****  * This function will let current thread yield processor, and scheduler will
 444:RT-Thread/src/thread.c ****  * choose a highest thread to run. After yield processor, the current thread
 445:RT-Thread/src/thread.c ****  * is still in READY state.
 446:RT-Thread/src/thread.c ****  *
 447:RT-Thread/src/thread.c ****  * @return RT_EOK
 448:RT-Thread/src/thread.c ****  */
 449:RT-Thread/src/thread.c **** rt_err_t rt_thread_yield(void)
 450:RT-Thread/src/thread.c **** {
 451:RT-Thread/src/thread.c ****     register rt_base_t level;
 452:RT-Thread/src/thread.c ****     struct rt_thread *thread;
 453:RT-Thread/src/thread.c **** 
 454:RT-Thread/src/thread.c ****     /* disable interrupt */
 455:RT-Thread/src/thread.c ****     level = rt_hw_interrupt_disable();
 456:RT-Thread/src/thread.c **** 
 457:RT-Thread/src/thread.c ****     /* set to current thread */
 458:RT-Thread/src/thread.c ****     thread = rt_current_thread;
 459:RT-Thread/src/thread.c **** 
 460:RT-Thread/src/thread.c ****     /* if the thread stat is READY and on ready queue list */
 461:RT-Thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY &&
 462:RT-Thread/src/thread.c ****         thread->tlist.next != thread->tlist.prev)
 463:RT-Thread/src/thread.c ****     {
 464:RT-Thread/src/thread.c ****         /* remove thread from thread list */
 465:RT-Thread/src/thread.c ****         rt_list_remove(&(thread->tlist));
 466:RT-Thread/src/thread.c **** 
 467:RT-Thread/src/thread.c ****         /* put thread to end of ready queue */
 468:RT-Thread/src/thread.c ****         rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
 469:RT-Thread/src/thread.c ****                               &(thread->tlist));
 470:RT-Thread/src/thread.c **** 
 471:RT-Thread/src/thread.c ****         /* enable interrupt */
 472:RT-Thread/src/thread.c ****         rt_hw_interrupt_enable(level);
 473:RT-Thread/src/thread.c **** 
 474:RT-Thread/src/thread.c ****         rt_schedule();
 475:RT-Thread/src/thread.c **** 
 476:RT-Thread/src/thread.c ****         return RT_EOK;
 477:RT-Thread/src/thread.c ****     }
 478:RT-Thread/src/thread.c **** 
 479:RT-Thread/src/thread.c ****     /* enable interrupt */
 480:RT-Thread/src/thread.c ****     rt_hw_interrupt_enable(level);
 481:RT-Thread/src/thread.c **** 
 482:RT-Thread/src/thread.c ****     return RT_EOK;
 483:RT-Thread/src/thread.c **** }
 484:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_yield);
 485:RT-Thread/src/thread.c **** 
 486:RT-Thread/src/thread.c **** /**
 487:RT-Thread/src/thread.c ****  * This function will let current thread sleep for some ticks.
 488:RT-Thread/src/thread.c ****  *
 489:RT-Thread/src/thread.c ****  * @param tick the sleep ticks
 490:RT-Thread/src/thread.c ****  *
 491:RT-Thread/src/thread.c ****  * @return RT_EOK
 492:RT-Thread/src/thread.c ****  */
 493:RT-Thread/src/thread.c **** rt_err_t rt_thread_sleep(rt_tick_t tick)
 494:RT-Thread/src/thread.c **** {
 495:RT-Thread/src/thread.c ****     register rt_base_t temp;
 496:RT-Thread/src/thread.c ****     struct rt_thread *thread;
 497:RT-Thread/src/thread.c **** 
 498:RT-Thread/src/thread.c ****     /* disable interrupt */
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 16


 499:RT-Thread/src/thread.c ****     temp = rt_hw_interrupt_disable();
 500:RT-Thread/src/thread.c ****     /* set to current thread */
 501:RT-Thread/src/thread.c ****     thread = rt_current_thread;
 502:RT-Thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 503:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 504:RT-Thread/src/thread.c **** 
 505:RT-Thread/src/thread.c ****     /* suspend thread */
 506:RT-Thread/src/thread.c ****     rt_thread_suspend(thread);
 507:RT-Thread/src/thread.c **** 
 508:RT-Thread/src/thread.c ****     /* reset the timeout of thread timer and start it */
 509:RT-Thread/src/thread.c ****     rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &tick);
 510:RT-Thread/src/thread.c ****     rt_timer_start(&(thread->thread_timer));
 511:RT-Thread/src/thread.c **** 
 512:RT-Thread/src/thread.c ****     /* enable interrupt */
 513:RT-Thread/src/thread.c ****     rt_hw_interrupt_enable(temp);
 514:RT-Thread/src/thread.c **** 
 515:RT-Thread/src/thread.c ****     rt_schedule();
 516:RT-Thread/src/thread.c **** 
 517:RT-Thread/src/thread.c ****     /* clear error number of this thread to RT_EOK */
 518:RT-Thread/src/thread.c ****     if (thread->error == -RT_ETIMEOUT)
 519:RT-Thread/src/thread.c ****         thread->error = RT_EOK;
 520:RT-Thread/src/thread.c **** 
 521:RT-Thread/src/thread.c ****     return RT_EOK;
 522:RT-Thread/src/thread.c **** }
 523:RT-Thread/src/thread.c **** 
 524:RT-Thread/src/thread.c **** /**
 525:RT-Thread/src/thread.c ****  * This function will let current thread delay for some ticks.
 526:RT-Thread/src/thread.c ****  *
 527:RT-Thread/src/thread.c ****  * @param tick the delay ticks
 528:RT-Thread/src/thread.c ****  *
 529:RT-Thread/src/thread.c ****  * @return RT_EOK
 530:RT-Thread/src/thread.c ****  */
 531:RT-Thread/src/thread.c **** rt_err_t rt_thread_delay(rt_tick_t tick)
 532:RT-Thread/src/thread.c **** {
 533:RT-Thread/src/thread.c ****     return rt_thread_sleep(tick);
 534:RT-Thread/src/thread.c **** }
 535:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_delay);
 536:RT-Thread/src/thread.c **** 
 537:RT-Thread/src/thread.c **** /**
 538:RT-Thread/src/thread.c ****  * This function will let current thread delay for some milliseconds.
 539:RT-Thread/src/thread.c ****  *
 540:RT-Thread/src/thread.c ****  * @param tick the delay time
 541:RT-Thread/src/thread.c ****  *
 542:RT-Thread/src/thread.c ****  * @return RT_EOK
 543:RT-Thread/src/thread.c ****  */
 544:RT-Thread/src/thread.c **** rt_err_t rt_thread_mdelay(rt_int32_t ms)
 545:RT-Thread/src/thread.c **** {
 546:RT-Thread/src/thread.c ****     rt_tick_t tick;
 547:RT-Thread/src/thread.c **** 
 548:RT-Thread/src/thread.c ****     tick = rt_tick_from_millisecond(ms);
 549:RT-Thread/src/thread.c **** 
 550:RT-Thread/src/thread.c ****     return rt_thread_sleep(tick);
 551:RT-Thread/src/thread.c **** }
 552:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_mdelay);
 553:RT-Thread/src/thread.c **** 
 554:RT-Thread/src/thread.c **** /**
 555:RT-Thread/src/thread.c ****  * This function will control thread behaviors according to control command.
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 17


 556:RT-Thread/src/thread.c ****  *
 557:RT-Thread/src/thread.c ****  * @param thread the specified thread to be controlled
 558:RT-Thread/src/thread.c ****  * @param cmd the control command, which includes
 559:RT-Thread/src/thread.c ****  *  RT_THREAD_CTRL_CHANGE_PRIORITY for changing priority level of thread;
 560:RT-Thread/src/thread.c ****  *  RT_THREAD_CTRL_STARTUP for starting a thread;
 561:RT-Thread/src/thread.c ****  *  RT_THREAD_CTRL_CLOSE for delete a thread.
 562:RT-Thread/src/thread.c ****  * @param arg the argument of control command
 563:RT-Thread/src/thread.c ****  *
 564:RT-Thread/src/thread.c ****  * @return RT_EOK
 565:RT-Thread/src/thread.c ****  */
 566:RT-Thread/src/thread.c **** rt_err_t rt_thread_control(rt_thread_t thread, int cmd, void *arg)
 567:RT-Thread/src/thread.c **** {
 568:RT-Thread/src/thread.c ****     register rt_base_t temp;
 569:RT-Thread/src/thread.c **** 
 570:RT-Thread/src/thread.c ****     /* thread check */
 571:RT-Thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 572:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 573:RT-Thread/src/thread.c **** 
 574:RT-Thread/src/thread.c ****     switch (cmd)
 575:RT-Thread/src/thread.c ****     {
 576:RT-Thread/src/thread.c ****     case RT_THREAD_CTRL_CHANGE_PRIORITY:
 577:RT-Thread/src/thread.c ****         /* disable interrupt */
 578:RT-Thread/src/thread.c ****         temp = rt_hw_interrupt_disable();
 579:RT-Thread/src/thread.c **** 
 580:RT-Thread/src/thread.c ****         /* for ready thread, change queue */
 581:RT-Thread/src/thread.c ****         if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY)
 582:RT-Thread/src/thread.c ****         {
 583:RT-Thread/src/thread.c ****             /* remove thread from schedule queue first */
 584:RT-Thread/src/thread.c ****             rt_schedule_remove_thread(thread);
 585:RT-Thread/src/thread.c **** 
 586:RT-Thread/src/thread.c ****             /* change thread priority */
 587:RT-Thread/src/thread.c ****             thread->current_priority = *(rt_uint8_t *)arg;
 588:RT-Thread/src/thread.c **** 
 589:RT-Thread/src/thread.c ****             /* recalculate priority attribute */
 590:RT-Thread/src/thread.c **** #if RT_THREAD_PRIORITY_MAX > 32
 591:RT-Thread/src/thread.c ****             thread->number      = thread->current_priority >> 3;            /* 5bit */
 592:RT-Thread/src/thread.c ****             thread->number_mask = 1 << thread->number;
 593:RT-Thread/src/thread.c ****             thread->high_mask   = 1 << (thread->current_priority & 0x07);   /* 3bit */
 594:RT-Thread/src/thread.c **** #else
 595:RT-Thread/src/thread.c ****             thread->number_mask = 1 << thread->current_priority;
 596:RT-Thread/src/thread.c **** #endif
 597:RT-Thread/src/thread.c **** 
 598:RT-Thread/src/thread.c ****             /* insert thread to schedule queue again */
 599:RT-Thread/src/thread.c ****             rt_schedule_insert_thread(thread);
 600:RT-Thread/src/thread.c ****         }
 601:RT-Thread/src/thread.c ****         else
 602:RT-Thread/src/thread.c ****         {
 603:RT-Thread/src/thread.c ****             thread->current_priority = *(rt_uint8_t *)arg;
 604:RT-Thread/src/thread.c **** 
 605:RT-Thread/src/thread.c ****             /* recalculate priority attribute */
 606:RT-Thread/src/thread.c **** #if RT_THREAD_PRIORITY_MAX > 32
 607:RT-Thread/src/thread.c ****             thread->number      = thread->current_priority >> 3;            /* 5bit */
 608:RT-Thread/src/thread.c ****             thread->number_mask = 1 << thread->number;
 609:RT-Thread/src/thread.c ****             thread->high_mask   = 1 << (thread->current_priority & 0x07);   /* 3bit */
 610:RT-Thread/src/thread.c **** #else
 611:RT-Thread/src/thread.c ****             thread->number_mask = 1 << thread->current_priority;
 612:RT-Thread/src/thread.c **** #endif
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 18


 613:RT-Thread/src/thread.c ****         }
 614:RT-Thread/src/thread.c **** 
 615:RT-Thread/src/thread.c ****         /* enable interrupt */
 616:RT-Thread/src/thread.c ****         rt_hw_interrupt_enable(temp);
 617:RT-Thread/src/thread.c ****         break;
 618:RT-Thread/src/thread.c **** 
 619:RT-Thread/src/thread.c ****     case RT_THREAD_CTRL_STARTUP:
 620:RT-Thread/src/thread.c ****         return rt_thread_startup(thread);
 621:RT-Thread/src/thread.c **** 
 622:RT-Thread/src/thread.c **** #ifdef RT_USING_HEAP
 623:RT-Thread/src/thread.c ****     case RT_THREAD_CTRL_CLOSE:
 624:RT-Thread/src/thread.c ****         return rt_thread_delete(thread);
 625:RT-Thread/src/thread.c **** #endif
 626:RT-Thread/src/thread.c **** 
 627:RT-Thread/src/thread.c ****     default:
 628:RT-Thread/src/thread.c ****         break;
 629:RT-Thread/src/thread.c ****     }
 630:RT-Thread/src/thread.c **** 
 631:RT-Thread/src/thread.c ****     return RT_EOK;
 632:RT-Thread/src/thread.c **** }
 633:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_control);
 634:RT-Thread/src/thread.c **** 
 635:RT-Thread/src/thread.c **** /**
 636:RT-Thread/src/thread.c ****  * This function will suspend the specified thread.
 637:RT-Thread/src/thread.c ****  *
 638:RT-Thread/src/thread.c ****  * @param thread the thread to be suspended
 639:RT-Thread/src/thread.c ****  *
 640:RT-Thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 641:RT-Thread/src/thread.c ****  *
 642:RT-Thread/src/thread.c ****  * @note if suspend self thread, after this function call, the
 643:RT-Thread/src/thread.c ****  * rt_schedule() must be invoked.
 644:RT-Thread/src/thread.c ****  */
 645:RT-Thread/src/thread.c **** rt_err_t rt_thread_suspend(rt_thread_t thread)
 646:RT-Thread/src/thread.c **** {
 647:RT-Thread/src/thread.c ****     register rt_base_t temp;
 648:RT-Thread/src/thread.c **** 
 649:RT-Thread/src/thread.c ****     /* thread check */
 650:RT-Thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 651:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 652:RT-Thread/src/thread.c **** 
 653:RT-Thread/src/thread.c ****     RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend:  %s\n", thread->name));
 654:RT-Thread/src/thread.c **** 
 655:RT-Thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_READY)
 656:RT-Thread/src/thread.c ****     {
 657:RT-Thread/src/thread.c ****         RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend: thread disorder, 0x%2x\n",
 658:RT-Thread/src/thread.c ****                                        thread->stat));
 659:RT-Thread/src/thread.c **** 
 660:RT-Thread/src/thread.c ****         return -RT_ERROR;
 661:RT-Thread/src/thread.c ****     }
 662:RT-Thread/src/thread.c **** 
 663:RT-Thread/src/thread.c ****     /* disable interrupt */
 664:RT-Thread/src/thread.c ****     temp = rt_hw_interrupt_disable();
 665:RT-Thread/src/thread.c **** 
 666:RT-Thread/src/thread.c ****     /* change thread stat */
 667:RT-Thread/src/thread.c ****     thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
 668:RT-Thread/src/thread.c ****     rt_schedule_remove_thread(thread);
 669:RT-Thread/src/thread.c **** 
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 19


 670:RT-Thread/src/thread.c ****     /* stop thread timer anyway */
 671:RT-Thread/src/thread.c ****     rt_timer_stop(&(thread->thread_timer));
 672:RT-Thread/src/thread.c **** 
 673:RT-Thread/src/thread.c ****     /* enable interrupt */
 674:RT-Thread/src/thread.c ****     rt_hw_interrupt_enable(temp);
 675:RT-Thread/src/thread.c **** 
 676:RT-Thread/src/thread.c ****     RT_OBJECT_HOOK_CALL(rt_thread_suspend_hook, (thread));
 677:RT-Thread/src/thread.c ****     return RT_EOK;
 678:RT-Thread/src/thread.c **** }
 679:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_suspend);
 680:RT-Thread/src/thread.c **** 
 681:RT-Thread/src/thread.c **** /**
 682:RT-Thread/src/thread.c ****  * This function will resume a thread and put it to system ready queue.
 683:RT-Thread/src/thread.c ****  *
 684:RT-Thread/src/thread.c ****  * @param thread the thread to be resumed
 685:RT-Thread/src/thread.c ****  *
 686:RT-Thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 687:RT-Thread/src/thread.c ****  */
 688:RT-Thread/src/thread.c **** rt_err_t rt_thread_resume(rt_thread_t thread)
 689:RT-Thread/src/thread.c **** {
 690:RT-Thread/src/thread.c ****     register rt_base_t temp;
 691:RT-Thread/src/thread.c **** 
 692:RT-Thread/src/thread.c ****     /* thread check */
 693:RT-Thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 694:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 695:RT-Thread/src/thread.c **** 
 696:RT-Thread/src/thread.c ****     RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume:  %s\n", thread->name));
 697:RT-Thread/src/thread.c **** 
 698:RT-Thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_SUSPEND)
 699:RT-Thread/src/thread.c ****     {
 700:RT-Thread/src/thread.c ****         RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume: thread disorder, %d\n",
 701:RT-Thread/src/thread.c ****                                        thread->stat));
 702:RT-Thread/src/thread.c **** 
 703:RT-Thread/src/thread.c ****         return -RT_ERROR;
 704:RT-Thread/src/thread.c ****     }
 705:RT-Thread/src/thread.c **** 
 706:RT-Thread/src/thread.c ****     /* disable interrupt */
 707:RT-Thread/src/thread.c ****     temp = rt_hw_interrupt_disable();
 708:RT-Thread/src/thread.c **** 
 709:RT-Thread/src/thread.c ****     /* remove from suspend list */
 710:RT-Thread/src/thread.c ****     rt_list_remove(&(thread->tlist));
 711:RT-Thread/src/thread.c **** 
 712:RT-Thread/src/thread.c ****     rt_timer_stop(&thread->thread_timer);
 713:RT-Thread/src/thread.c **** 
 714:RT-Thread/src/thread.c ****     /* enable interrupt */
 715:RT-Thread/src/thread.c ****     rt_hw_interrupt_enable(temp);
 716:RT-Thread/src/thread.c **** 
 717:RT-Thread/src/thread.c ****     /* insert to schedule ready list */
 718:RT-Thread/src/thread.c ****     rt_schedule_insert_thread(thread);
 719:RT-Thread/src/thread.c **** 
 720:RT-Thread/src/thread.c ****     RT_OBJECT_HOOK_CALL(rt_thread_resume_hook, (thread));
 721:RT-Thread/src/thread.c ****     return RT_EOK;
 722:RT-Thread/src/thread.c **** }
 723:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_resume);
 724:RT-Thread/src/thread.c **** 
 725:RT-Thread/src/thread.c **** /**
 726:RT-Thread/src/thread.c ****  * This function is the timeout function for thread, normally which is invoked
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 20


 727:RT-Thread/src/thread.c ****  * when thread is timeout to wait some resource.
 728:RT-Thread/src/thread.c ****  *
 729:RT-Thread/src/thread.c ****  * @param parameter the parameter of thread timeout function
 730:RT-Thread/src/thread.c ****  */
 731:RT-Thread/src/thread.c **** void rt_thread_timeout(void *parameter)
 732:RT-Thread/src/thread.c **** {
 289              		.loc 1 732 1 is_stmt 1 view -0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              		.loc 1 732 1 is_stmt 0 view .LVU87
 294 0000 10B5     		push	{r4, lr}
 295              	.LCFI4:
 296              		.cfi_def_cfa_offset 8
 297              		.cfi_offset 4, -8
 298              		.cfi_offset 14, -4
 733:RT-Thread/src/thread.c ****     struct rt_thread *thread;
 299              		.loc 1 733 5 is_stmt 1 view .LVU88
 734:RT-Thread/src/thread.c **** 
 735:RT-Thread/src/thread.c ****     thread = (struct rt_thread *)parameter;
 300              		.loc 1 735 5 view .LVU89
 301              	.LVL23:
 736:RT-Thread/src/thread.c **** 
 737:RT-Thread/src/thread.c ****     /* thread check */
 738:RT-Thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 302              		.loc 1 738 33 view .LVU90
 739:RT-Thread/src/thread.c ****     RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND);
 303              		.loc 1 739 73 view .LVU91
 740:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 304              		.loc 1 740 81 view .LVU92
 741:RT-Thread/src/thread.c **** 
 742:RT-Thread/src/thread.c ****     /* set error number */
 743:RT-Thread/src/thread.c ****     thread->error = -RT_ETIMEOUT;
 305              		.loc 1 743 5 view .LVU93
 306              		.loc 1 743 19 is_stmt 0 view .LVU94
 307 0002 6FF00102 		mvn	r2, #1
 308 0006 0263     		str	r2, [r0, #48]
 744:RT-Thread/src/thread.c **** 
 745:RT-Thread/src/thread.c ****     /* remove from suspend list */
 746:RT-Thread/src/thread.c ****     rt_list_remove(&(thread->tlist));
 309              		.loc 1 746 5 is_stmt 1 view .LVU95
 310 0008 00F11402 		add	r2, r0, #20
 311              	.LVL24:
 312              	.LBB22:
 313              	.LBI22:
  65:RT-Thread/include/rtservice.h **** }
  66:RT-Thread/include/rtservice.h **** 
  67:RT-Thread/include/rtservice.h **** /**
  68:RT-Thread/include/rtservice.h ****  * @brief insert a node before a list
  69:RT-Thread/include/rtservice.h ****  *
  70:RT-Thread/include/rtservice.h ****  * @param n new node to be inserted
  71:RT-Thread/include/rtservice.h ****  * @param l list to insert it
  72:RT-Thread/include/rtservice.h ****  */
  73:RT-Thread/include/rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  74:RT-Thread/include/rtservice.h **** {
  75:RT-Thread/include/rtservice.h ****     l->prev->next = n;
  76:RT-Thread/include/rtservice.h ****     n->prev = l->prev;
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 21


  77:RT-Thread/include/rtservice.h **** 
  78:RT-Thread/include/rtservice.h ****     l->prev = n;
  79:RT-Thread/include/rtservice.h ****     n->next = l;
  80:RT-Thread/include/rtservice.h **** }
  81:RT-Thread/include/rtservice.h **** 
  82:RT-Thread/include/rtservice.h **** /**
  83:RT-Thread/include/rtservice.h ****  * @brief remove node from list.
  84:RT-Thread/include/rtservice.h ****  * @param n the node to remove from the list.
  85:RT-Thread/include/rtservice.h ****  */
  86:RT-Thread/include/rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
 314              		.loc 2 86 16 view .LVU96
 315              	.LBB23:
  87:RT-Thread/include/rtservice.h **** {
  88:RT-Thread/include/rtservice.h ****     n->next->prev = n->prev;
 316              		.loc 2 88 5 view .LVU97
 317              		.loc 2 88 6 is_stmt 0 view .LVU98
 318 000c 4469     		ldr	r4, [r0, #20]
 319              		.loc 2 88 22 view .LVU99
 320 000e 8169     		ldr	r1, [r0, #24]
 321              		.loc 2 88 19 view .LVU100
 322 0010 6160     		str	r1, [r4, #4]
  89:RT-Thread/include/rtservice.h ****     n->prev->next = n->next;
 323              		.loc 2 89 5 is_stmt 1 view .LVU101
 324              		.loc 2 89 22 is_stmt 0 view .LVU102
 325 0012 4469     		ldr	r4, [r0, #20]
 326              		.loc 2 89 19 view .LVU103
 327 0014 0C60     		str	r4, [r1]
  90:RT-Thread/include/rtservice.h **** 
  91:RT-Thread/include/rtservice.h ****     n->next = n->prev = n;
 328              		.loc 2 91 5 is_stmt 1 view .LVU104
 329              		.loc 2 91 23 is_stmt 0 view .LVU105
 330 0016 8261     		str	r2, [r0, #24]
 331              		.loc 2 91 13 view .LVU106
 332 0018 4261     		str	r2, [r0, #20]
 333              	.LVL25:
 334              		.loc 2 91 13 view .LVU107
 335              	.LBE23:
 336              	.LBE22:
 747:RT-Thread/src/thread.c **** 
 748:RT-Thread/src/thread.c ****     /* insert to schedule ready list */
 749:RT-Thread/src/thread.c ****     rt_schedule_insert_thread(thread);
 337              		.loc 1 749 5 is_stmt 1 view .LVU108
 338 001a FFF7FEFF 		bl	rt_schedule_insert_thread
 339              	.LVL26:
 750:RT-Thread/src/thread.c **** 
 751:RT-Thread/src/thread.c ****     /* do schedule */
 752:RT-Thread/src/thread.c ****     rt_schedule();
 340              		.loc 1 752 5 view .LVU109
 341 001e FFF7FEFF 		bl	rt_schedule
 342              	.LVL27:
 753:RT-Thread/src/thread.c **** }
 343              		.loc 1 753 1 is_stmt 0 view .LVU110
 344 0022 10BD     		pop	{r4, pc}
 345              		.cfi_endproc
 346              	.LFE30:
 348              		.section	.text.rt_thread_init,"ax",%progbits
 349              		.align	1
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 22


 350              		.global	rt_thread_init
 351              		.syntax unified
 352              		.thumb
 353              		.thumb_func
 354              		.fpu softvfp
 356              	rt_thread_init:
 357              	.LVL28:
 358              	.LFB17:
 228:RT-Thread/src/thread.c ****     /* thread check */
 359              		.loc 1 228 1 is_stmt 1 view -0
 360              		.cfi_startproc
 361              		@ args = 16, pretend = 0, frame = 0
 362              		@ frame_needed = 0, uses_anonymous_args = 0
 228:RT-Thread/src/thread.c ****     /* thread check */
 363              		.loc 1 228 1 is_stmt 0 view .LVU112
 364 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 365              	.LCFI5:
 366              		.cfi_def_cfa_offset 20
 367              		.cfi_offset 4, -20
 368              		.cfi_offset 5, -16
 369              		.cfi_offset 6, -12
 370              		.cfi_offset 7, -8
 371              		.cfi_offset 14, -4
 372 0002 85B0     		sub	sp, sp, #20
 373              	.LCFI6:
 374              		.cfi_def_cfa_offset 40
 375 0004 0546     		mov	r5, r0
 376 0006 0C46     		mov	r4, r1
 377 0008 1646     		mov	r6, r2
 378 000a 1F46     		mov	r7, r3
 230:RT-Thread/src/thread.c ****     RT_ASSERT(stack_start != RT_NULL);
 379              		.loc 1 230 33 is_stmt 1 view .LVU113
 231:RT-Thread/src/thread.c **** 
 380              		.loc 1 231 38 view .LVU114
 234:RT-Thread/src/thread.c **** 
 381              		.loc 1 234 5 view .LVU115
 382 000c 0A46     		mov	r2, r1
 383              	.LVL29:
 234:RT-Thread/src/thread.c **** 
 384              		.loc 1 234 5 is_stmt 0 view .LVU116
 385 000e 0121     		movs	r1, #1
 386              	.LVL30:
 234:RT-Thread/src/thread.c **** 
 387              		.loc 1 234 5 view .LVU117
 388 0010 FFF7FEFF 		bl	rt_object_init
 389              	.LVL31:
 236:RT-Thread/src/thread.c ****                            name,
 390              		.loc 1 236 5 is_stmt 1 view .LVU118
 236:RT-Thread/src/thread.c ****                            name,
 391              		.loc 1 236 12 is_stmt 0 view .LVU119
 392 0014 0D9B     		ldr	r3, [sp, #52]
 393 0016 0393     		str	r3, [sp, #12]
 394 0018 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 395 001c 0293     		str	r3, [sp, #8]
 396 001e 0B9B     		ldr	r3, [sp, #44]
 397 0020 0193     		str	r3, [sp, #4]
 398 0022 0A9B     		ldr	r3, [sp, #40]
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 23


 399 0024 0093     		str	r3, [sp]
 400 0026 3B46     		mov	r3, r7
 401 0028 3246     		mov	r2, r6
 402 002a 2146     		mov	r1, r4
 403 002c 2846     		mov	r0, r5
 404 002e FFF7FEFF 		bl	_rt_thread_init
 405              	.LVL32:
 244:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_init);
 406              		.loc 1 244 1 view .LVU120
 407 0032 05B0     		add	sp, sp, #20
 408              	.LCFI7:
 409              		.cfi_def_cfa_offset 20
 410              		@ sp needed
 411 0034 F0BD     		pop	{r4, r5, r6, r7, pc}
 244:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_init);
 412              		.loc 1 244 1 view .LVU121
 413              		.cfi_endproc
 414              	.LFE17:
 416              		.section	.text.rt_thread_self,"ax",%progbits
 417              		.align	1
 418              		.global	rt_thread_self
 419              		.syntax unified
 420              		.thumb
 421              		.thumb_func
 422              		.fpu softvfp
 424              	rt_thread_self:
 425              	.LFB18:
 253:RT-Thread/src/thread.c ****     return rt_current_thread;
 426              		.loc 1 253 1 is_stmt 1 view -0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430              		@ link register save eliminated.
 254:RT-Thread/src/thread.c **** }
 431              		.loc 1 254 5 view .LVU123
 255:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_self);
 432              		.loc 1 255 1 is_stmt 0 view .LVU124
 433 0000 014B     		ldr	r3, .L17
 434 0002 1868     		ldr	r0, [r3]
 435 0004 7047     		bx	lr
 436              	.L18:
 437 0006 00BF     		.align	2
 438              	.L17:
 439 0008 00000000 		.word	rt_current_thread
 440              		.cfi_endproc
 441              	.LFE18:
 443              		.section	.text.rt_thread_detach,"ax",%progbits
 444              		.align	1
 445              		.global	rt_thread_detach
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu softvfp
 451              	rt_thread_detach:
 452              	.LVL33:
 453              	.LFB20:
 309:RT-Thread/src/thread.c ****     rt_base_t lock;
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 24


 454              		.loc 1 309 1 is_stmt 1 view -0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 0
 457              		@ frame_needed = 0, uses_anonymous_args = 0
 309:RT-Thread/src/thread.c ****     rt_base_t lock;
 458              		.loc 1 309 1 is_stmt 0 view .LVU126
 459 0000 10B5     		push	{r4, lr}
 460              	.LCFI8:
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 4, -8
 463              		.cfi_offset 14, -4
 464 0002 0446     		mov	r4, r0
 310:RT-Thread/src/thread.c **** 
 465              		.loc 1 310 5 is_stmt 1 view .LVU127
 313:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 466              		.loc 1 313 33 view .LVU128
 314:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread));
 467              		.loc 1 314 81 view .LVU129
 315:RT-Thread/src/thread.c **** 
 468              		.loc 1 315 62 view .LVU130
 317:RT-Thread/src/thread.c ****     {
 469              		.loc 1 317 5 view .LVU131
 317:RT-Thread/src/thread.c ****     {
 470              		.loc 1 317 16 is_stmt 0 view .LVU132
 471 0004 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 317:RT-Thread/src/thread.c ****     {
 472              		.loc 1 317 8 view .LVU133
 473 0008 13F00F0F 		tst	r3, #15
 474 000c 1BD1     		bne	.L24
 475              	.LVL34:
 476              	.L20:
 324:RT-Thread/src/thread.c **** 
 477              		.loc 1 324 5 is_stmt 1 view .LVU134
 478 000e 04F15000 		add	r0, r4, #80
 479 0012 FFF7FEFF 		bl	rt_timer_detach
 480              	.LVL35:
 327:RT-Thread/src/thread.c **** 
 481              		.loc 1 327 5 view .LVU135
 327:RT-Thread/src/thread.c **** 
 482              		.loc 1 327 18 is_stmt 0 view .LVU136
 483 0016 0423     		movs	r3, #4
 484 0018 84F83430 		strb	r3, [r4, #52]
 329:RT-Thread/src/thread.c ****         thread->cleanup == RT_NULL)
 485              		.loc 1 329 5 is_stmt 1 view .LVU137
 329:RT-Thread/src/thread.c ****         thread->cleanup == RT_NULL)
 486              		.loc 1 329 10 is_stmt 0 view .LVU138
 487 001c 2046     		mov	r0, r4
 488 001e FFF7FEFF 		bl	rt_object_is_systemobject
 489              	.LVL36:
 329:RT-Thread/src/thread.c ****         thread->cleanup == RT_NULL)
 490              		.loc 1 329 8 view .LVU139
 491 0022 0128     		cmp	r0, #1
 492 0024 01D1     		bne	.L21
 330:RT-Thread/src/thread.c ****     {
 493              		.loc 1 330 15 discriminator 1 view .LVU140
 494 0026 E36F     		ldr	r3, [r4, #124]
 329:RT-Thread/src/thread.c ****         thread->cleanup == RT_NULL)
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 25


 495              		.loc 1 329 69 discriminator 1 view .LVU141
 496 0028 83B1     		cbz	r3, .L25
 497              	.L21:
 337:RT-Thread/src/thread.c ****         /* insert to defunct thread list */
 498              		.loc 1 337 9 is_stmt 1 view .LVU142
 337:RT-Thread/src/thread.c ****         /* insert to defunct thread list */
 499              		.loc 1 337 16 is_stmt 0 view .LVU143
 500 002a FFF7FEFF 		bl	rt_hw_interrupt_disable
 501              	.LVL37:
 339:RT-Thread/src/thread.c ****         /* enable interrupt */
 502              		.loc 1 339 9 is_stmt 1 view .LVU144
 503 002e 04F11402 		add	r2, r4, #20
 504              	.LVL38:
 505              	.LBB24:
 506              	.LBI24:
  58:RT-Thread/include/rtservice.h **** {
 507              		.loc 2 58 16 view .LVU145
 508              	.LBB25:
  60:RT-Thread/include/rtservice.h ****     n->next = l->next;
 509              		.loc 2 60 5 view .LVU146
  60:RT-Thread/include/rtservice.h ****     n->next = l->next;
 510              		.loc 2 60 6 is_stmt 0 view .LVU147
 511 0032 084B     		ldr	r3, .L26
 512 0034 1968     		ldr	r1, [r3]
  60:RT-Thread/include/rtservice.h ****     n->next = l->next;
 513              		.loc 2 60 19 view .LVU148
 514 0036 4A60     		str	r2, [r1, #4]
  61:RT-Thread/include/rtservice.h **** 
 515              		.loc 2 61 5 is_stmt 1 view .LVU149
  61:RT-Thread/include/rtservice.h **** 
 516              		.loc 2 61 13 is_stmt 0 view .LVU150
 517 0038 6161     		str	r1, [r4, #20]
  63:RT-Thread/include/rtservice.h ****     n->prev = l;
 518              		.loc 2 63 5 is_stmt 1 view .LVU151
  63:RT-Thread/include/rtservice.h ****     n->prev = l;
 519              		.loc 2 63 13 is_stmt 0 view .LVU152
 520 003a 1A60     		str	r2, [r3]
  64:RT-Thread/include/rtservice.h **** }
 521              		.loc 2 64 5 is_stmt 1 view .LVU153
  64:RT-Thread/include/rtservice.h **** }
 522              		.loc 2 64 13 is_stmt 0 view .LVU154
 523 003c A361     		str	r3, [r4, #24]
 524              	.LVL39:
  64:RT-Thread/include/rtservice.h **** }
 525              		.loc 2 64 13 view .LVU155
 526              	.LBE25:
 527              	.LBE24:
 341:RT-Thread/src/thread.c ****     }
 528              		.loc 1 341 9 is_stmt 1 view .LVU156
 529 003e FFF7FEFF 		bl	rt_hw_interrupt_enable
 530              	.LVL40:
 531              	.L22:
 344:RT-Thread/src/thread.c **** }
 532              		.loc 1 344 5 view .LVU157
 345:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_detach);
 533              		.loc 1 345 1 is_stmt 0 view .LVU158
 534 0042 0020     		movs	r0, #0
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 26


 535 0044 10BD     		pop	{r4, pc}
 536              	.LVL41:
 537              	.L24:
 320:RT-Thread/src/thread.c ****     }
 538              		.loc 1 320 9 is_stmt 1 view .LVU159
 539 0046 FFF7FEFF 		bl	rt_schedule_remove_thread
 540              	.LVL42:
 320:RT-Thread/src/thread.c ****     }
 541              		.loc 1 320 9 is_stmt 0 view .LVU160
 542 004a E0E7     		b	.L20
 543              	.L25:
 332:RT-Thread/src/thread.c ****     }
 544              		.loc 1 332 9 is_stmt 1 view .LVU161
 545 004c 2046     		mov	r0, r4
 546 004e FFF7FEFF 		bl	rt_object_detach
 547              	.LVL43:
 548 0052 F6E7     		b	.L22
 549              	.L27:
 550              		.align	2
 551              	.L26:
 552 0054 00000000 		.word	rt_thread_defunct
 553              		.cfi_endproc
 554              	.LFE20:
 556              		.section	.text.rt_thread_create,"ax",%progbits
 557              		.align	1
 558              		.global	rt_thread_create
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu softvfp
 564              	rt_thread_create:
 565              	.LVL44:
 566              	.LFB21:
 368:RT-Thread/src/thread.c ****     struct rt_thread *thread;
 567              		.loc 1 368 1 view -0
 568              		.cfi_startproc
 569              		@ args = 8, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 368:RT-Thread/src/thread.c ****     struct rt_thread *thread;
 571              		.loc 1 368 1 is_stmt 0 view .LVU163
 572 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 573              	.LCFI9:
 574              		.cfi_def_cfa_offset 28
 575              		.cfi_offset 4, -28
 576              		.cfi_offset 5, -24
 577              		.cfi_offset 6, -20
 578              		.cfi_offset 7, -16
 579              		.cfi_offset 8, -12
 580              		.cfi_offset 9, -8
 581              		.cfi_offset 14, -4
 582 0004 85B0     		sub	sp, sp, #20
 583              	.LCFI10:
 584              		.cfi_def_cfa_offset 48
 585 0006 0446     		mov	r4, r0
 586 0008 0F46     		mov	r7, r1
 587 000a 9046     		mov	r8, r2
 588 000c 1D46     		mov	r5, r3
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 27


 369:RT-Thread/src/thread.c ****     void *stack_start;
 589              		.loc 1 369 5 is_stmt 1 view .LVU164
 370:RT-Thread/src/thread.c **** 
 590              		.loc 1 370 5 view .LVU165
 372:RT-Thread/src/thread.c ****                                                     name);
 591              		.loc 1 372 5 view .LVU166
 372:RT-Thread/src/thread.c ****                                                     name);
 592              		.loc 1 372 34 is_stmt 0 view .LVU167
 593 000e 0146     		mov	r1, r0
 594              	.LVL45:
 372:RT-Thread/src/thread.c ****                                                     name);
 595              		.loc 1 372 34 view .LVU168
 596 0010 0120     		movs	r0, #1
 597              	.LVL46:
 372:RT-Thread/src/thread.c ****                                                     name);
 598              		.loc 1 372 34 view .LVU169
 599 0012 FFF7FEFF 		bl	rt_object_allocate
 600              	.LVL47:
 374:RT-Thread/src/thread.c ****         return RT_NULL;
 601              		.loc 1 374 5 is_stmt 1 view .LVU170
 374:RT-Thread/src/thread.c ****         return RT_NULL;
 602              		.loc 1 374 8 is_stmt 0 view .LVU171
 603 0016 0646     		mov	r6, r0
 604 0018 88B1     		cbz	r0, .L28
 377:RT-Thread/src/thread.c ****     if (stack_start == RT_NULL)
 605              		.loc 1 377 5 is_stmt 1 view .LVU172
 377:RT-Thread/src/thread.c ****     if (stack_start == RT_NULL)
 606              		.loc 1 377 19 is_stmt 0 view .LVU173
 607 001a 2846     		mov	r0, r5
 608              	.LVL48:
 377:RT-Thread/src/thread.c ****     if (stack_start == RT_NULL)
 609              		.loc 1 377 19 view .LVU174
 610 001c FFF7FEFF 		bl	rt_malloc
 611              	.LVL49:
 378:RT-Thread/src/thread.c ****     {
 612              		.loc 1 378 5 is_stmt 1 view .LVU175
 378:RT-Thread/src/thread.c ****     {
 613              		.loc 1 378 8 is_stmt 0 view .LVU176
 614 0020 8146     		mov	r9, r0
 615 0022 80B1     		cbz	r0, .L32
 386:RT-Thread/src/thread.c ****                     name,
 616              		.loc 1 386 5 is_stmt 1 view .LVU177
 617 0024 0D9B     		ldr	r3, [sp, #52]
 618 0026 0393     		str	r3, [sp, #12]
 619 0028 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 620 002c 0293     		str	r3, [sp, #8]
 621 002e 0195     		str	r5, [sp, #4]
 622 0030 0090     		str	r0, [sp]
 623 0032 4346     		mov	r3, r8
 624 0034 3A46     		mov	r2, r7
 625 0036 2146     		mov	r1, r4
 626 0038 3046     		mov	r0, r6
 627              	.LVL50:
 386:RT-Thread/src/thread.c ****                     name,
 628              		.loc 1 386 5 is_stmt 0 view .LVU178
 629 003a FFF7FEFF 		bl	_rt_thread_init
 630              	.LVL51:
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 28


 395:RT-Thread/src/thread.c **** }
 631              		.loc 1 395 5 is_stmt 1 view .LVU179
 632              	.L28:
 396:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_create);
 633              		.loc 1 396 1 is_stmt 0 view .LVU180
 634 003e 3046     		mov	r0, r6
 635 0040 05B0     		add	sp, sp, #20
 636              	.LCFI11:
 637              		.cfi_remember_state
 638              		.cfi_def_cfa_offset 28
 639              		@ sp needed
 640 0042 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 641              	.LVL52:
 642              	.L32:
 643              	.LCFI12:
 644              		.cfi_restore_state
 381:RT-Thread/src/thread.c **** 
 645              		.loc 1 381 9 is_stmt 1 view .LVU181
 646 0046 3046     		mov	r0, r6
 647              	.LVL53:
 381:RT-Thread/src/thread.c **** 
 648              		.loc 1 381 9 is_stmt 0 view .LVU182
 649 0048 FFF7FEFF 		bl	rt_object_delete
 650              	.LVL54:
 383:RT-Thread/src/thread.c ****     }
 651              		.loc 1 383 9 is_stmt 1 view .LVU183
 383:RT-Thread/src/thread.c ****     }
 652              		.loc 1 383 16 is_stmt 0 view .LVU184
 653 004c 4E46     		mov	r6, r9
 654              	.LVL55:
 383:RT-Thread/src/thread.c ****     }
 655              		.loc 1 383 16 view .LVU185
 656 004e F6E7     		b	.L28
 657              		.cfi_endproc
 658              	.LFE21:
 660              		.section	.text.rt_thread_delete,"ax",%progbits
 661              		.align	1
 662              		.global	rt_thread_delete
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu softvfp
 668              	rt_thread_delete:
 669              	.LVL56:
 670              	.LFB22:
 408:RT-Thread/src/thread.c ****     rt_base_t lock;
 671              		.loc 1 408 1 is_stmt 1 view -0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 408:RT-Thread/src/thread.c ****     rt_base_t lock;
 675              		.loc 1 408 1 is_stmt 0 view .LVU187
 676 0000 10B5     		push	{r4, lr}
 677              	.LCFI13:
 678              		.cfi_def_cfa_offset 8
 679              		.cfi_offset 4, -8
 680              		.cfi_offset 14, -4
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 29


 681 0002 0446     		mov	r4, r0
 409:RT-Thread/src/thread.c **** 
 682              		.loc 1 409 5 is_stmt 1 view .LVU188
 412:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 683              		.loc 1 412 33 view .LVU189
 413:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread) == RT_FALSE);
 684              		.loc 1 413 81 view .LVU190
 414:RT-Thread/src/thread.c **** 
 685              		.loc 1 414 74 view .LVU191
 416:RT-Thread/src/thread.c ****     {
 686              		.loc 1 416 5 view .LVU192
 416:RT-Thread/src/thread.c ****     {
 687              		.loc 1 416 16 is_stmt 0 view .LVU193
 688 0004 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 416:RT-Thread/src/thread.c ****     {
 689              		.loc 1 416 8 view .LVU194
 690 0008 13F00F0F 		tst	r3, #15
 691 000c 14D1     		bne	.L36
 692              	.LVL57:
 693              	.L34:
 423:RT-Thread/src/thread.c **** 
 694              		.loc 1 423 5 is_stmt 1 view .LVU195
 695 000e 04F15000 		add	r0, r4, #80
 696 0012 FFF7FEFF 		bl	rt_timer_detach
 697              	.LVL58:
 426:RT-Thread/src/thread.c **** 
 698              		.loc 1 426 5 view .LVU196
 426:RT-Thread/src/thread.c **** 
 699              		.loc 1 426 18 is_stmt 0 view .LVU197
 700 0016 0423     		movs	r3, #4
 701 0018 84F83430 		strb	r3, [r4, #52]
 429:RT-Thread/src/thread.c **** 
 702              		.loc 1 429 5 is_stmt 1 view .LVU198
 429:RT-Thread/src/thread.c **** 
 703              		.loc 1 429 12 is_stmt 0 view .LVU199
 704 001c FFF7FEFF 		bl	rt_hw_interrupt_disable
 705              	.LVL59:
 432:RT-Thread/src/thread.c **** 
 706              		.loc 1 432 5 is_stmt 1 view .LVU200
 707 0020 04F11402 		add	r2, r4, #20
 708              	.LVL60:
 709              	.LBB26:
 710              	.LBI26:
  58:RT-Thread/include/rtservice.h **** {
 711              		.loc 2 58 16 view .LVU201
 712              	.LBB27:
  60:RT-Thread/include/rtservice.h ****     n->next = l->next;
 713              		.loc 2 60 5 view .LVU202
  60:RT-Thread/include/rtservice.h ****     n->next = l->next;
 714              		.loc 2 60 6 is_stmt 0 view .LVU203
 715 0024 064B     		ldr	r3, .L37
 716 0026 1968     		ldr	r1, [r3]
  60:RT-Thread/include/rtservice.h ****     n->next = l->next;
 717              		.loc 2 60 19 view .LVU204
 718 0028 4A60     		str	r2, [r1, #4]
  61:RT-Thread/include/rtservice.h **** 
 719              		.loc 2 61 5 is_stmt 1 view .LVU205
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 30


  61:RT-Thread/include/rtservice.h **** 
 720              		.loc 2 61 13 is_stmt 0 view .LVU206
 721 002a 6161     		str	r1, [r4, #20]
  63:RT-Thread/include/rtservice.h ****     n->prev = l;
 722              		.loc 2 63 5 is_stmt 1 view .LVU207
  63:RT-Thread/include/rtservice.h ****     n->prev = l;
 723              		.loc 2 63 13 is_stmt 0 view .LVU208
 724 002c 1A60     		str	r2, [r3]
  64:RT-Thread/include/rtservice.h **** }
 725              		.loc 2 64 5 is_stmt 1 view .LVU209
  64:RT-Thread/include/rtservice.h **** }
 726              		.loc 2 64 13 is_stmt 0 view .LVU210
 727 002e A361     		str	r3, [r4, #24]
 728              	.LVL61:
  64:RT-Thread/include/rtservice.h **** }
 729              		.loc 2 64 13 view .LVU211
 730              	.LBE27:
 731              	.LBE26:
 435:RT-Thread/src/thread.c **** 
 732              		.loc 1 435 5 is_stmt 1 view .LVU212
 733 0030 FFF7FEFF 		bl	rt_hw_interrupt_enable
 734              	.LVL62:
 437:RT-Thread/src/thread.c **** }
 735              		.loc 1 437 5 view .LVU213
 438:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_delete);
 736              		.loc 1 438 1 is_stmt 0 view .LVU214
 737 0034 0020     		movs	r0, #0
 738 0036 10BD     		pop	{r4, pc}
 739              	.LVL63:
 740              	.L36:
 419:RT-Thread/src/thread.c ****     }
 741              		.loc 1 419 9 is_stmt 1 view .LVU215
 742 0038 FFF7FEFF 		bl	rt_schedule_remove_thread
 743              	.LVL64:
 419:RT-Thread/src/thread.c ****     }
 744              		.loc 1 419 9 is_stmt 0 view .LVU216
 745 003c E7E7     		b	.L34
 746              	.L38:
 747 003e 00BF     		.align	2
 748              	.L37:
 749 0040 00000000 		.word	rt_thread_defunct
 750              		.cfi_endproc
 751              	.LFE22:
 753              		.section	.text.rt_thread_yield,"ax",%progbits
 754              		.align	1
 755              		.global	rt_thread_yield
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 759              		.fpu softvfp
 761              	rt_thread_yield:
 762              	.LFB23:
 450:RT-Thread/src/thread.c ****     register rt_base_t level;
 763              		.loc 1 450 1 is_stmt 1 view -0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 31


 767 0000 10B5     		push	{r4, lr}
 768              	.LCFI14:
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 4, -8
 771              		.cfi_offset 14, -4
 451:RT-Thread/src/thread.c ****     struct rt_thread *thread;
 772              		.loc 1 451 5 view .LVU218
 452:RT-Thread/src/thread.c **** 
 773              		.loc 1 452 5 view .LVU219
 455:RT-Thread/src/thread.c **** 
 774              		.loc 1 455 5 view .LVU220
 455:RT-Thread/src/thread.c **** 
 775              		.loc 1 455 13 is_stmt 0 view .LVU221
 776 0002 FFF7FEFF 		bl	rt_hw_interrupt_disable
 777              	.LVL65:
 458:RT-Thread/src/thread.c **** 
 778              		.loc 1 458 5 is_stmt 1 view .LVU222
 458:RT-Thread/src/thread.c **** 
 779              		.loc 1 458 12 is_stmt 0 view .LVU223
 780 0006 134B     		ldr	r3, .L44
 781 0008 1B68     		ldr	r3, [r3]
 782              	.LVL66:
 461:RT-Thread/src/thread.c ****         thread->tlist.next != thread->tlist.prev)
 783              		.loc 1 461 5 is_stmt 1 view .LVU224
 461:RT-Thread/src/thread.c ****         thread->tlist.next != thread->tlist.prev)
 784              		.loc 1 461 16 is_stmt 0 view .LVU225
 785 000a 93F83420 		ldrb	r2, [r3, #52]	@ zero_extendqisi2
 461:RT-Thread/src/thread.c ****         thread->tlist.next != thread->tlist.prev)
 786              		.loc 1 461 8 view .LVU226
 787 000e 02F00F02 		and	r2, r2, #15
 788 0012 012A     		cmp	r2, #1
 789 0014 03D1     		bne	.L40
 462:RT-Thread/src/thread.c ****     {
 790              		.loc 1 462 22 discriminator 1 view .LVU227
 791 0016 5969     		ldr	r1, [r3, #20]
 462:RT-Thread/src/thread.c ****     {
 792              		.loc 1 462 44 discriminator 1 view .LVU228
 793 0018 9A69     		ldr	r2, [r3, #24]
 461:RT-Thread/src/thread.c ****         thread->tlist.next != thread->tlist.prev)
 794              		.loc 1 461 65 discriminator 1 view .LVU229
 795 001a 9142     		cmp	r1, r2
 796 001c 03D1     		bne	.L43
 797              	.L40:
 480:RT-Thread/src/thread.c **** 
 798              		.loc 1 480 5 is_stmt 1 view .LVU230
 799 001e FFF7FEFF 		bl	rt_hw_interrupt_enable
 800              	.LVL67:
 482:RT-Thread/src/thread.c **** }
 801              		.loc 1 482 5 view .LVU231
 802              	.L41:
 483:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_yield);
 803              		.loc 1 483 1 is_stmt 0 view .LVU232
 804 0022 0020     		movs	r0, #0
 805 0024 10BD     		pop	{r4, pc}
 806              	.LVL68:
 807              	.L43:
 465:RT-Thread/src/thread.c **** 
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 32


 808              		.loc 1 465 9 is_stmt 1 view .LVU233
 809 0026 03F11404 		add	r4, r3, #20
 810              	.LVL69:
 811              	.LBB28:
 812              	.LBI28:
  86:RT-Thread/include/rtservice.h **** {
 813              		.loc 2 86 16 view .LVU234
 814              	.LBB29:
  88:RT-Thread/include/rtservice.h ****     n->prev->next = n->next;
 815              		.loc 2 88 5 view .LVU235
  88:RT-Thread/include/rtservice.h ****     n->prev->next = n->next;
 816              		.loc 2 88 19 is_stmt 0 view .LVU236
 817 002a 4A60     		str	r2, [r1, #4]
  89:RT-Thread/include/rtservice.h **** 
 818              		.loc 2 89 5 is_stmt 1 view .LVU237
  89:RT-Thread/include/rtservice.h **** 
 819              		.loc 2 89 22 is_stmt 0 view .LVU238
 820 002c 5969     		ldr	r1, [r3, #20]
  89:RT-Thread/include/rtservice.h **** 
 821              		.loc 2 89 19 view .LVU239
 822 002e 1160     		str	r1, [r2]
 823              		.loc 2 91 5 is_stmt 1 view .LVU240
 824              		.loc 2 91 23 is_stmt 0 view .LVU241
 825 0030 9C61     		str	r4, [r3, #24]
 826              		.loc 2 91 13 view .LVU242
 827 0032 5C61     		str	r4, [r3, #20]
 828              	.LVL70:
 829              		.loc 2 91 13 view .LVU243
 830              	.LBE29:
 831              	.LBE28:
 468:RT-Thread/src/thread.c ****                               &(thread->tlist));
 832              		.loc 1 468 9 is_stmt 1 view .LVU244
 468:RT-Thread/src/thread.c ****                               &(thread->tlist));
 833              		.loc 1 468 64 is_stmt 0 view .LVU245
 834 0034 93F83510 		ldrb	r1, [r3, #53]	@ zero_extendqisi2
 468:RT-Thread/src/thread.c ****                               &(thread->tlist));
 835              		.loc 1 468 9 view .LVU246
 836 0038 074A     		ldr	r2, .L44+4
 837 003a 02EBC102 		add	r2, r2, r1, lsl #3
 838              	.LVL71:
 839              	.LBB30:
 840              	.LBI30:
  73:RT-Thread/include/rtservice.h **** {
 841              		.loc 2 73 16 is_stmt 1 view .LVU247
 842              	.LBB31:
  75:RT-Thread/include/rtservice.h ****     n->prev = l->prev;
 843              		.loc 2 75 5 view .LVU248
  75:RT-Thread/include/rtservice.h ****     n->prev = l->prev;
 844              		.loc 2 75 6 is_stmt 0 view .LVU249
 845 003e 5168     		ldr	r1, [r2, #4]
  75:RT-Thread/include/rtservice.h ****     n->prev = l->prev;
 846              		.loc 2 75 19 view .LVU250
 847 0040 0C60     		str	r4, [r1]
  76:RT-Thread/include/rtservice.h **** 
 848              		.loc 2 76 5 is_stmt 1 view .LVU251
  76:RT-Thread/include/rtservice.h **** 
 849              		.loc 2 76 16 is_stmt 0 view .LVU252
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 33


 850 0042 5168     		ldr	r1, [r2, #4]
  76:RT-Thread/include/rtservice.h **** 
 851              		.loc 2 76 13 view .LVU253
 852 0044 9961     		str	r1, [r3, #24]
  78:RT-Thread/include/rtservice.h ****     n->next = l;
 853              		.loc 2 78 5 is_stmt 1 view .LVU254
  78:RT-Thread/include/rtservice.h ****     n->next = l;
 854              		.loc 2 78 13 is_stmt 0 view .LVU255
 855 0046 5460     		str	r4, [r2, #4]
  79:RT-Thread/include/rtservice.h **** }
 856              		.loc 2 79 5 is_stmt 1 view .LVU256
  79:RT-Thread/include/rtservice.h **** }
 857              		.loc 2 79 13 is_stmt 0 view .LVU257
 858 0048 5A61     		str	r2, [r3, #20]
 859              	.LVL72:
  79:RT-Thread/include/rtservice.h **** }
 860              		.loc 2 79 13 view .LVU258
 861              	.LBE31:
 862              	.LBE30:
 472:RT-Thread/src/thread.c **** 
 863              		.loc 1 472 9 is_stmt 1 view .LVU259
 864 004a FFF7FEFF 		bl	rt_hw_interrupt_enable
 865              	.LVL73:
 474:RT-Thread/src/thread.c **** 
 866              		.loc 1 474 9 view .LVU260
 867 004e FFF7FEFF 		bl	rt_schedule
 868              	.LVL74:
 476:RT-Thread/src/thread.c ****     }
 869              		.loc 1 476 9 view .LVU261
 476:RT-Thread/src/thread.c ****     }
 870              		.loc 1 476 16 is_stmt 0 view .LVU262
 871 0052 E6E7     		b	.L41
 872              	.L45:
 873              		.align	2
 874              	.L44:
 875 0054 00000000 		.word	rt_current_thread
 876 0058 00000000 		.word	rt_thread_priority_table
 877              		.cfi_endproc
 878              	.LFE23:
 880              		.section	.text.rt_thread_suspend,"ax",%progbits
 881              		.align	1
 882              		.global	rt_thread_suspend
 883              		.syntax unified
 884              		.thumb
 885              		.thumb_func
 886              		.fpu softvfp
 888              	rt_thread_suspend:
 889              	.LVL75:
 890              	.LFB28:
 646:RT-Thread/src/thread.c ****     register rt_base_t temp;
 891              		.loc 1 646 1 is_stmt 1 view -0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 0
 894              		@ frame_needed = 0, uses_anonymous_args = 0
 646:RT-Thread/src/thread.c ****     register rt_base_t temp;
 895              		.loc 1 646 1 is_stmt 0 view .LVU264
 896 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 34


 897              	.LCFI15:
 898              		.cfi_def_cfa_offset 16
 899              		.cfi_offset 3, -16
 900              		.cfi_offset 4, -12
 901              		.cfi_offset 5, -8
 902              		.cfi_offset 14, -4
 647:RT-Thread/src/thread.c **** 
 903              		.loc 1 647 5 is_stmt 1 view .LVU265
 650:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 904              		.loc 1 650 33 view .LVU266
 651:RT-Thread/src/thread.c **** 
 905              		.loc 1 651 81 view .LVU267
 653:RT-Thread/src/thread.c **** 
 906              		.loc 1 653 75 view .LVU268
 655:RT-Thread/src/thread.c ****     {
 907              		.loc 1 655 5 view .LVU269
 655:RT-Thread/src/thread.c ****     {
 908              		.loc 1 655 16 is_stmt 0 view .LVU270
 909 0002 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 655:RT-Thread/src/thread.c ****     {
 910              		.loc 1 655 8 view .LVU271
 911 0006 03F00F03 		and	r3, r3, #15
 912 000a 012B     		cmp	r3, #1
 913 000c 17D1     		bne	.L48
 914 000e 0446     		mov	r4, r0
 664:RT-Thread/src/thread.c **** 
 915              		.loc 1 664 5 is_stmt 1 view .LVU272
 664:RT-Thread/src/thread.c **** 
 916              		.loc 1 664 12 is_stmt 0 view .LVU273
 917 0010 FFF7FEFF 		bl	rt_hw_interrupt_disable
 918              	.LVL76:
 664:RT-Thread/src/thread.c **** 
 919              		.loc 1 664 12 view .LVU274
 920 0014 0546     		mov	r5, r0
 921              	.LVL77:
 667:RT-Thread/src/thread.c ****     rt_schedule_remove_thread(thread);
 922              		.loc 1 667 5 is_stmt 1 view .LVU275
 667:RT-Thread/src/thread.c ****     rt_schedule_remove_thread(thread);
 923              		.loc 1 667 47 is_stmt 0 view .LVU276
 924 0016 94F93430 		ldrsb	r3, [r4, #52]
 667:RT-Thread/src/thread.c ****     rt_schedule_remove_thread(thread);
 925              		.loc 1 667 54 view .LVU277
 926 001a 23F00F03 		bic	r3, r3, #15
 667:RT-Thread/src/thread.c ****     rt_schedule_remove_thread(thread);
 927              		.loc 1 667 38 view .LVU278
 928 001e 43F00203 		orr	r3, r3, #2
 667:RT-Thread/src/thread.c ****     rt_schedule_remove_thread(thread);
 929              		.loc 1 667 18 view .LVU279
 930 0022 84F83430 		strb	r3, [r4, #52]
 668:RT-Thread/src/thread.c **** 
 931              		.loc 1 668 5 is_stmt 1 view .LVU280
 932 0026 2046     		mov	r0, r4
 933              	.LVL78:
 668:RT-Thread/src/thread.c **** 
 934              		.loc 1 668 5 is_stmt 0 view .LVU281
 935 0028 FFF7FEFF 		bl	rt_schedule_remove_thread
 936              	.LVL79:
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 35


 671:RT-Thread/src/thread.c **** 
 937              		.loc 1 671 5 is_stmt 1 view .LVU282
 938 002c 04F15000 		add	r0, r4, #80
 939 0030 FFF7FEFF 		bl	rt_timer_stop
 940              	.LVL80:
 674:RT-Thread/src/thread.c **** 
 941              		.loc 1 674 5 view .LVU283
 942 0034 2846     		mov	r0, r5
 943 0036 FFF7FEFF 		bl	rt_hw_interrupt_enable
 944              	.LVL81:
 676:RT-Thread/src/thread.c ****     return RT_EOK;
 945              		.loc 1 676 58 view .LVU284
 677:RT-Thread/src/thread.c **** }
 946              		.loc 1 677 5 view .LVU285
 677:RT-Thread/src/thread.c **** }
 947              		.loc 1 677 12 is_stmt 0 view .LVU286
 948 003a 0020     		movs	r0, #0
 949              	.LVL82:
 950              	.L46:
 678:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_suspend);
 951              		.loc 1 678 1 view .LVU287
 952 003c 38BD     		pop	{r3, r4, r5, pc}
 953              	.LVL83:
 954              	.L48:
 660:RT-Thread/src/thread.c ****     }
 955              		.loc 1 660 16 view .LVU288
 956 003e 4FF0FF30 		mov	r0, #-1
 957              	.LVL84:
 660:RT-Thread/src/thread.c ****     }
 958              		.loc 1 660 16 view .LVU289
 959 0042 FBE7     		b	.L46
 960              		.cfi_endproc
 961              	.LFE28:
 963              		.section	.text.rt_thread_sleep,"ax",%progbits
 964              		.align	1
 965              		.global	rt_thread_sleep
 966              		.syntax unified
 967              		.thumb
 968              		.thumb_func
 969              		.fpu softvfp
 971              	rt_thread_sleep:
 972              	.LVL85:
 973              	.LFB24:
 494:RT-Thread/src/thread.c ****     register rt_base_t temp;
 974              		.loc 1 494 1 is_stmt 1 view -0
 975              		.cfi_startproc
 976              		@ args = 0, pretend = 0, frame = 8
 977              		@ frame_needed = 0, uses_anonymous_args = 0
 494:RT-Thread/src/thread.c ****     register rt_base_t temp;
 978              		.loc 1 494 1 is_stmt 0 view .LVU291
 979 0000 70B5     		push	{r4, r5, r6, lr}
 980              	.LCFI16:
 981              		.cfi_def_cfa_offset 16
 982              		.cfi_offset 4, -16
 983              		.cfi_offset 5, -12
 984              		.cfi_offset 6, -8
 985              		.cfi_offset 14, -4
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 36


 986 0002 82B0     		sub	sp, sp, #8
 987              	.LCFI17:
 988              		.cfi_def_cfa_offset 24
 989 0004 0190     		str	r0, [sp, #4]
 495:RT-Thread/src/thread.c ****     struct rt_thread *thread;
 990              		.loc 1 495 5 is_stmt 1 view .LVU292
 496:RT-Thread/src/thread.c **** 
 991              		.loc 1 496 5 view .LVU293
 499:RT-Thread/src/thread.c ****     /* set to current thread */
 992              		.loc 1 499 5 view .LVU294
 499:RT-Thread/src/thread.c ****     /* set to current thread */
 993              		.loc 1 499 12 is_stmt 0 view .LVU295
 994 0006 FFF7FEFF 		bl	rt_hw_interrupt_disable
 995              	.LVL86:
 499:RT-Thread/src/thread.c ****     /* set to current thread */
 996              		.loc 1 499 12 view .LVU296
 997 000a 0546     		mov	r5, r0
 998              	.LVL87:
 501:RT-Thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 999              		.loc 1 501 5 is_stmt 1 view .LVU297
 501:RT-Thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 1000              		.loc 1 501 12 is_stmt 0 view .LVU298
 1001 000c 0E4B     		ldr	r3, .L54
 1002 000e 1C68     		ldr	r4, [r3]
 1003              	.LVL88:
 502:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1004              		.loc 1 502 33 is_stmt 1 view .LVU299
 503:RT-Thread/src/thread.c **** 
 1005              		.loc 1 503 81 view .LVU300
 506:RT-Thread/src/thread.c **** 
 1006              		.loc 1 506 5 view .LVU301
 1007 0010 2046     		mov	r0, r4
 1008              	.LVL89:
 506:RT-Thread/src/thread.c **** 
 1009              		.loc 1 506 5 is_stmt 0 view .LVU302
 1010 0012 FFF7FEFF 		bl	rt_thread_suspend
 1011              	.LVL90:
 509:RT-Thread/src/thread.c ****     rt_timer_start(&(thread->thread_timer));
 1012              		.loc 1 509 5 is_stmt 1 view .LVU303
 1013 0016 04F15006 		add	r6, r4, #80
 1014 001a 01AA     		add	r2, sp, #4
 1015 001c 0021     		movs	r1, #0
 1016 001e 3046     		mov	r0, r6
 1017 0020 FFF7FEFF 		bl	rt_timer_control
 1018              	.LVL91:
 510:RT-Thread/src/thread.c **** 
 1019              		.loc 1 510 5 view .LVU304
 1020 0024 3046     		mov	r0, r6
 1021 0026 FFF7FEFF 		bl	rt_timer_start
 1022              	.LVL92:
 513:RT-Thread/src/thread.c **** 
 1023              		.loc 1 513 5 view .LVU305
 1024 002a 2846     		mov	r0, r5
 1025 002c FFF7FEFF 		bl	rt_hw_interrupt_enable
 1026              	.LVL93:
 515:RT-Thread/src/thread.c **** 
 1027              		.loc 1 515 5 view .LVU306
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 37


 1028 0030 FFF7FEFF 		bl	rt_schedule
 1029              	.LVL94:
 518:RT-Thread/src/thread.c ****         thread->error = RT_EOK;
 1030              		.loc 1 518 5 view .LVU307
 518:RT-Thread/src/thread.c ****         thread->error = RT_EOK;
 1031              		.loc 1 518 15 is_stmt 0 view .LVU308
 1032 0034 236B     		ldr	r3, [r4, #48]
 518:RT-Thread/src/thread.c ****         thread->error = RT_EOK;
 1033              		.loc 1 518 8 view .LVU309
 1034 0036 13F1020F 		cmn	r3, #2
 1035 003a 02D0     		beq	.L53
 1036              	.L51:
 521:RT-Thread/src/thread.c **** }
 1037              		.loc 1 521 5 is_stmt 1 view .LVU310
 522:RT-Thread/src/thread.c **** 
 1038              		.loc 1 522 1 is_stmt 0 view .LVU311
 1039 003c 0020     		movs	r0, #0
 1040 003e 02B0     		add	sp, sp, #8
 1041              	.LCFI18:
 1042              		.cfi_remember_state
 1043              		.cfi_def_cfa_offset 16
 1044              		@ sp needed
 1045 0040 70BD     		pop	{r4, r5, r6, pc}
 1046              	.LVL95:
 1047              	.L53:
 1048              	.LCFI19:
 1049              		.cfi_restore_state
 519:RT-Thread/src/thread.c **** 
 1050              		.loc 1 519 9 is_stmt 1 view .LVU312
 519:RT-Thread/src/thread.c **** 
 1051              		.loc 1 519 23 is_stmt 0 view .LVU313
 1052 0042 0023     		movs	r3, #0
 1053 0044 2363     		str	r3, [r4, #48]
 1054 0046 F9E7     		b	.L51
 1055              	.L55:
 1056              		.align	2
 1057              	.L54:
 1058 0048 00000000 		.word	rt_current_thread
 1059              		.cfi_endproc
 1060              	.LFE24:
 1062              		.section	.text.rt_thread_delay,"ax",%progbits
 1063              		.align	1
 1064              		.global	rt_thread_delay
 1065              		.syntax unified
 1066              		.thumb
 1067              		.thumb_func
 1068              		.fpu softvfp
 1070              	rt_thread_delay:
 1071              	.LVL96:
 1072              	.LFB25:
 532:RT-Thread/src/thread.c ****     return rt_thread_sleep(tick);
 1073              		.loc 1 532 1 is_stmt 1 view -0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 532:RT-Thread/src/thread.c ****     return rt_thread_sleep(tick);
 1077              		.loc 1 532 1 is_stmt 0 view .LVU315
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 38


 1078 0000 08B5     		push	{r3, lr}
 1079              	.LCFI20:
 1080              		.cfi_def_cfa_offset 8
 1081              		.cfi_offset 3, -8
 1082              		.cfi_offset 14, -4
 533:RT-Thread/src/thread.c **** }
 1083              		.loc 1 533 5 is_stmt 1 view .LVU316
 533:RT-Thread/src/thread.c **** }
 1084              		.loc 1 533 12 is_stmt 0 view .LVU317
 1085 0002 FFF7FEFF 		bl	rt_thread_sleep
 1086              	.LVL97:
 534:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_delay);
 1087              		.loc 1 534 1 view .LVU318
 1088 0006 08BD     		pop	{r3, pc}
 1089              		.cfi_endproc
 1090              	.LFE25:
 1092              		.section	.text.rt_thread_mdelay,"ax",%progbits
 1093              		.align	1
 1094              		.global	rt_thread_mdelay
 1095              		.syntax unified
 1096              		.thumb
 1097              		.thumb_func
 1098              		.fpu softvfp
 1100              	rt_thread_mdelay:
 1101              	.LVL98:
 1102              	.LFB26:
 545:RT-Thread/src/thread.c ****     rt_tick_t tick;
 1103              		.loc 1 545 1 is_stmt 1 view -0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 0
 1106              		@ frame_needed = 0, uses_anonymous_args = 0
 545:RT-Thread/src/thread.c ****     rt_tick_t tick;
 1107              		.loc 1 545 1 is_stmt 0 view .LVU320
 1108 0000 08B5     		push	{r3, lr}
 1109              	.LCFI21:
 1110              		.cfi_def_cfa_offset 8
 1111              		.cfi_offset 3, -8
 1112              		.cfi_offset 14, -4
 546:RT-Thread/src/thread.c **** 
 1113              		.loc 1 546 5 is_stmt 1 view .LVU321
 548:RT-Thread/src/thread.c **** 
 1114              		.loc 1 548 5 view .LVU322
 548:RT-Thread/src/thread.c **** 
 1115              		.loc 1 548 12 is_stmt 0 view .LVU323
 1116 0002 FFF7FEFF 		bl	rt_tick_from_millisecond
 1117              	.LVL99:
 550:RT-Thread/src/thread.c **** }
 1118              		.loc 1 550 5 is_stmt 1 view .LVU324
 550:RT-Thread/src/thread.c **** }
 1119              		.loc 1 550 12 is_stmt 0 view .LVU325
 1120 0006 FFF7FEFF 		bl	rt_thread_sleep
 1121              	.LVL100:
 551:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_mdelay);
 1122              		.loc 1 551 1 view .LVU326
 1123 000a 08BD     		pop	{r3, pc}
 1124              		.cfi_endproc
 1125              	.LFE26:
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 39


 1127              		.section	.text.rt_thread_resume,"ax",%progbits
 1128              		.align	1
 1129              		.global	rt_thread_resume
 1130              		.syntax unified
 1131              		.thumb
 1132              		.thumb_func
 1133              		.fpu softvfp
 1135              	rt_thread_resume:
 1136              	.LVL101:
 1137              	.LFB29:
 689:RT-Thread/src/thread.c ****     register rt_base_t temp;
 1138              		.loc 1 689 1 is_stmt 1 view -0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 0
 1141              		@ frame_needed = 0, uses_anonymous_args = 0
 689:RT-Thread/src/thread.c ****     register rt_base_t temp;
 1142              		.loc 1 689 1 is_stmt 0 view .LVU328
 1143 0000 38B5     		push	{r3, r4, r5, lr}
 1144              	.LCFI22:
 1145              		.cfi_def_cfa_offset 16
 1146              		.cfi_offset 3, -16
 1147              		.cfi_offset 4, -12
 1148              		.cfi_offset 5, -8
 1149              		.cfi_offset 14, -4
 690:RT-Thread/src/thread.c **** 
 1150              		.loc 1 690 5 is_stmt 1 view .LVU329
 693:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1151              		.loc 1 693 33 view .LVU330
 694:RT-Thread/src/thread.c **** 
 1152              		.loc 1 694 81 view .LVU331
 696:RT-Thread/src/thread.c **** 
 1153              		.loc 1 696 74 view .LVU332
 698:RT-Thread/src/thread.c ****     {
 1154              		.loc 1 698 5 view .LVU333
 698:RT-Thread/src/thread.c ****     {
 1155              		.loc 1 698 16 is_stmt 0 view .LVU334
 1156 0002 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 698:RT-Thread/src/thread.c ****     {
 1157              		.loc 1 698 8 view .LVU335
 1158 0006 03F00F03 		and	r3, r3, #15
 1159 000a 022B     		cmp	r3, #2
 1160 000c 18D1     		bne	.L62
 1161 000e 0446     		mov	r4, r0
 707:RT-Thread/src/thread.c **** 
 1162              		.loc 1 707 5 is_stmt 1 view .LVU336
 707:RT-Thread/src/thread.c **** 
 1163              		.loc 1 707 12 is_stmt 0 view .LVU337
 1164 0010 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1165              	.LVL102:
 707:RT-Thread/src/thread.c **** 
 1166              		.loc 1 707 12 view .LVU338
 1167 0014 0546     		mov	r5, r0
 1168              	.LVL103:
 710:RT-Thread/src/thread.c **** 
 1169              		.loc 1 710 5 is_stmt 1 view .LVU339
 1170 0016 04F11403 		add	r3, r4, #20
 1171              	.LVL104:
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 40


 1172              	.LBB32:
 1173              	.LBI32:
  86:RT-Thread/include/rtservice.h **** {
 1174              		.loc 2 86 16 view .LVU340
 1175              	.LBB33:
  88:RT-Thread/include/rtservice.h ****     n->prev->next = n->next;
 1176              		.loc 2 88 5 view .LVU341
  88:RT-Thread/include/rtservice.h ****     n->prev->next = n->next;
 1177              		.loc 2 88 6 is_stmt 0 view .LVU342
 1178 001a 6169     		ldr	r1, [r4, #20]
  88:RT-Thread/include/rtservice.h ****     n->prev->next = n->next;
 1179              		.loc 2 88 22 view .LVU343
 1180 001c A269     		ldr	r2, [r4, #24]
  88:RT-Thread/include/rtservice.h ****     n->prev->next = n->next;
 1181              		.loc 2 88 19 view .LVU344
 1182 001e 4A60     		str	r2, [r1, #4]
  89:RT-Thread/include/rtservice.h **** 
 1183              		.loc 2 89 5 is_stmt 1 view .LVU345
  89:RT-Thread/include/rtservice.h **** 
 1184              		.loc 2 89 22 is_stmt 0 view .LVU346
 1185 0020 6169     		ldr	r1, [r4, #20]
  89:RT-Thread/include/rtservice.h **** 
 1186              		.loc 2 89 19 view .LVU347
 1187 0022 1160     		str	r1, [r2]
 1188              		.loc 2 91 5 is_stmt 1 view .LVU348
 1189              		.loc 2 91 23 is_stmt 0 view .LVU349
 1190 0024 A361     		str	r3, [r4, #24]
 1191              		.loc 2 91 13 view .LVU350
 1192 0026 6361     		str	r3, [r4, #20]
 1193              	.LVL105:
 1194              		.loc 2 91 13 view .LVU351
 1195              	.LBE33:
 1196              	.LBE32:
 712:RT-Thread/src/thread.c **** 
 1197              		.loc 1 712 5 is_stmt 1 view .LVU352
 1198 0028 04F15000 		add	r0, r4, #80
 1199              	.LVL106:
 712:RT-Thread/src/thread.c **** 
 1200              		.loc 1 712 5 is_stmt 0 view .LVU353
 1201 002c FFF7FEFF 		bl	rt_timer_stop
 1202              	.LVL107:
 715:RT-Thread/src/thread.c **** 
 1203              		.loc 1 715 5 is_stmt 1 view .LVU354
 1204 0030 2846     		mov	r0, r5
 1205 0032 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1206              	.LVL108:
 718:RT-Thread/src/thread.c **** 
 1207              		.loc 1 718 5 view .LVU355
 1208 0036 2046     		mov	r0, r4
 1209 0038 FFF7FEFF 		bl	rt_schedule_insert_thread
 1210              	.LVL109:
 720:RT-Thread/src/thread.c ****     return RT_EOK;
 1211              		.loc 1 720 57 view .LVU356
 721:RT-Thread/src/thread.c **** }
 1212              		.loc 1 721 5 view .LVU357
 721:RT-Thread/src/thread.c **** }
 1213              		.loc 1 721 12 is_stmt 0 view .LVU358
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 41


 1214 003c 0020     		movs	r0, #0
 1215              	.LVL110:
 1216              	.L60:
 722:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_resume);
 1217              		.loc 1 722 1 view .LVU359
 1218 003e 38BD     		pop	{r3, r4, r5, pc}
 1219              	.LVL111:
 1220              	.L62:
 703:RT-Thread/src/thread.c ****     }
 1221              		.loc 1 703 16 view .LVU360
 1222 0040 4FF0FF30 		mov	r0, #-1
 1223              	.LVL112:
 703:RT-Thread/src/thread.c ****     }
 1224              		.loc 1 703 16 view .LVU361
 1225 0044 FBE7     		b	.L60
 1226              		.cfi_endproc
 1227              	.LFE29:
 1229              		.section	.text.rt_thread_startup,"ax",%progbits
 1230              		.align	1
 1231              		.global	rt_thread_startup
 1232              		.syntax unified
 1233              		.thumb
 1234              		.thumb_func
 1235              		.fpu softvfp
 1237              	rt_thread_startup:
 1238              	.LVL113:
 1239              	.LFB19:
 266:RT-Thread/src/thread.c ****     /* thread check */
 1240              		.loc 1 266 1 is_stmt 1 view -0
 1241              		.cfi_startproc
 1242              		@ args = 0, pretend = 0, frame = 0
 1243              		@ frame_needed = 0, uses_anonymous_args = 0
 266:RT-Thread/src/thread.c ****     /* thread check */
 1244              		.loc 1 266 1 is_stmt 0 view .LVU363
 1245 0000 10B5     		push	{r4, lr}
 1246              	.LCFI23:
 1247              		.cfi_def_cfa_offset 8
 1248              		.cfi_offset 4, -8
 1249              		.cfi_offset 14, -4
 268:RT-Thread/src/thread.c ****     RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_INIT);
 1250              		.loc 1 268 33 is_stmt 1 view .LVU364
 269:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1251              		.loc 1 269 70 view .LVU365
 270:RT-Thread/src/thread.c **** 
 1252              		.loc 1 270 81 view .LVU366
 273:RT-Thread/src/thread.c **** 
 1253              		.loc 1 273 5 view .LVU367
 273:RT-Thread/src/thread.c **** 
 1254              		.loc 1 273 38 is_stmt 0 view .LVU368
 1255 0002 90F83620 		ldrb	r2, [r0, #54]	@ zero_extendqisi2
 273:RT-Thread/src/thread.c **** 
 1256              		.loc 1 273 30 view .LVU369
 1257 0006 80F83520 		strb	r2, [r0, #53]
 277:RT-Thread/src/thread.c ****     thread->number_mask = 1L << thread->number;
 1258              		.loc 1 277 5 is_stmt 1 view .LVU370
 277:RT-Thread/src/thread.c ****     thread->number_mask = 1L << thread->number;
 1259              		.loc 1 277 25 is_stmt 0 view .LVU371
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 42


 1260 000a D408     		lsrs	r4, r2, #3
 1261 000c 80F83740 		strb	r4, [r0, #55]
 278:RT-Thread/src/thread.c ****     thread->high_mask   = 1L << (thread->current_priority & 0x07);  /* 3bit */
 1262              		.loc 1 278 5 is_stmt 1 view .LVU372
 278:RT-Thread/src/thread.c ****     thread->high_mask   = 1L << (thread->current_priority & 0x07);  /* 3bit */
 1263              		.loc 1 278 30 is_stmt 0 view .LVU373
 1264 0010 0121     		movs	r1, #1
 1265 0012 01FA04F4 		lsl	r4, r1, r4
 278:RT-Thread/src/thread.c ****     thread->high_mask   = 1L << (thread->current_priority & 0x07);  /* 3bit */
 1266              		.loc 1 278 25 view .LVU374
 1267 0016 C463     		str	r4, [r0, #60]
 279:RT-Thread/src/thread.c **** #else
 1268              		.loc 1 279 5 is_stmt 1 view .LVU375
 279:RT-Thread/src/thread.c **** #else
 1269              		.loc 1 279 59 is_stmt 0 view .LVU376
 1270 0018 02F00702 		and	r2, r2, #7
 279:RT-Thread/src/thread.c **** #else
 1271              		.loc 1 279 30 view .LVU377
 1272 001c 01FA02F2 		lsl	r2, r1, r2
 279:RT-Thread/src/thread.c **** #else
 1273              		.loc 1 279 25 view .LVU378
 1274 0020 80F83820 		strb	r2, [r0, #56]
 285:RT-Thread/src/thread.c ****     /* change thread stat */
 1275              		.loc 1 285 73 is_stmt 1 view .LVU379
 287:RT-Thread/src/thread.c ****     /* then resume it */
 1276              		.loc 1 287 5 view .LVU380
 287:RT-Thread/src/thread.c ****     /* then resume it */
 1277              		.loc 1 287 18 is_stmt 0 view .LVU381
 1278 0024 0222     		movs	r2, #2
 1279 0026 80F83420 		strb	r2, [r0, #52]
 289:RT-Thread/src/thread.c ****     if (rt_thread_self() != RT_NULL)
 1280              		.loc 1 289 5 is_stmt 1 view .LVU382
 1281 002a FFF7FEFF 		bl	rt_thread_resume
 1282              	.LVL114:
 290:RT-Thread/src/thread.c ****     {
 1283              		.loc 1 290 5 view .LVU383
 290:RT-Thread/src/thread.c ****     {
 1284              		.loc 1 290 9 is_stmt 0 view .LVU384
 1285 002e FFF7FEFF 		bl	rt_thread_self
 1286              	.LVL115:
 290:RT-Thread/src/thread.c ****     {
 1287              		.loc 1 290 8 view .LVU385
 1288 0032 08B1     		cbz	r0, .L65
 293:RT-Thread/src/thread.c ****     }
 1289              		.loc 1 293 9 is_stmt 1 view .LVU386
 1290 0034 FFF7FEFF 		bl	rt_schedule
 1291              	.LVL116:
 1292              	.L65:
 296:RT-Thread/src/thread.c **** }
 1293              		.loc 1 296 5 view .LVU387
 297:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_startup);
 1294              		.loc 1 297 1 is_stmt 0 view .LVU388
 1295 0038 0020     		movs	r0, #0
 1296 003a 10BD     		pop	{r4, pc}
 1297              		.cfi_endproc
 1298              	.LFE19:
 1300              		.section	.text.rt_thread_control,"ax",%progbits
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 43


 1301              		.align	1
 1302              		.global	rt_thread_control
 1303              		.syntax unified
 1304              		.thumb
 1305              		.thumb_func
 1306              		.fpu softvfp
 1308              	rt_thread_control:
 1309              	.LVL117:
 1310              	.LFB27:
 567:RT-Thread/src/thread.c ****     register rt_base_t temp;
 1311              		.loc 1 567 1 is_stmt 1 view -0
 1312              		.cfi_startproc
 1313              		@ args = 0, pretend = 0, frame = 0
 1314              		@ frame_needed = 0, uses_anonymous_args = 0
 567:RT-Thread/src/thread.c ****     register rt_base_t temp;
 1315              		.loc 1 567 1 is_stmt 0 view .LVU390
 1316 0000 70B5     		push	{r4, r5, r6, lr}
 1317              	.LCFI24:
 1318              		.cfi_def_cfa_offset 16
 1319              		.cfi_offset 4, -16
 1320              		.cfi_offset 5, -12
 1321              		.cfi_offset 6, -8
 1322              		.cfi_offset 14, -4
 1323 0002 0446     		mov	r4, r0
 568:RT-Thread/src/thread.c **** 
 1324              		.loc 1 568 5 is_stmt 1 view .LVU391
 571:RT-Thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1325              		.loc 1 571 33 view .LVU392
 572:RT-Thread/src/thread.c **** 
 1326              		.loc 1 572 81 view .LVU393
 574:RT-Thread/src/thread.c ****     {
 1327              		.loc 1 574 5 view .LVU394
 1328 0004 0129     		cmp	r1, #1
 1329 0006 3DD0     		beq	.L68
 1330 0008 1546     		mov	r5, r2
 1331 000a 0229     		cmp	r1, #2
 1332 000c 02D0     		beq	.L69
 1333 000e B1B3     		cbz	r1, .L70
 1334 0010 0020     		movs	r0, #0
 1335              	.LVL118:
 1336              	.L67:
 632:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_control);
 1337              		.loc 1 632 1 is_stmt 0 view .LVU395
 1338 0012 70BD     		pop	{r4, r5, r6, pc}
 1339              	.LVL119:
 1340              	.L69:
 578:RT-Thread/src/thread.c **** 
 1341              		.loc 1 578 9 is_stmt 1 view .LVU396
 578:RT-Thread/src/thread.c **** 
 1342              		.loc 1 578 16 is_stmt 0 view .LVU397
 1343 0014 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1344              	.LVL120:
 578:RT-Thread/src/thread.c **** 
 1345              		.loc 1 578 16 view .LVU398
 1346 0018 0646     		mov	r6, r0
 1347              	.LVL121:
 581:RT-Thread/src/thread.c ****         {
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 44


 1348              		.loc 1 581 9 is_stmt 1 view .LVU399
 581:RT-Thread/src/thread.c ****         {
 1349              		.loc 1 581 20 is_stmt 0 view .LVU400
 1350 001a 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 581:RT-Thread/src/thread.c ****         {
 1351              		.loc 1 581 12 view .LVU401
 1352 001e 03F00F03 		and	r3, r3, #15
 1353 0022 012B     		cmp	r3, #1
 1354 0024 14D0     		beq	.L75
 603:RT-Thread/src/thread.c **** 
 1355              		.loc 1 603 13 is_stmt 1 view .LVU402
 603:RT-Thread/src/thread.c **** 
 1356              		.loc 1 603 40 is_stmt 0 view .LVU403
 1357 0026 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 603:RT-Thread/src/thread.c **** 
 1358              		.loc 1 603 38 view .LVU404
 1359 0028 84F83530 		strb	r3, [r4, #53]
 607:RT-Thread/src/thread.c ****             thread->number_mask = 1 << thread->number;
 1360              		.loc 1 607 13 is_stmt 1 view .LVU405
 607:RT-Thread/src/thread.c ****             thread->number_mask = 1 << thread->number;
 1361              		.loc 1 607 33 is_stmt 0 view .LVU406
 1362 002c D908     		lsrs	r1, r3, #3
 1363 002e 84F83710 		strb	r1, [r4, #55]
 608:RT-Thread/src/thread.c ****             thread->high_mask   = 1 << (thread->current_priority & 0x07);   /* 3bit */
 1364              		.loc 1 608 13 is_stmt 1 view .LVU407
 608:RT-Thread/src/thread.c ****             thread->high_mask   = 1 << (thread->current_priority & 0x07);   /* 3bit */
 1365              		.loc 1 608 37 is_stmt 0 view .LVU408
 1366 0032 0122     		movs	r2, #1
 1367 0034 02FA01F1 		lsl	r1, r2, r1
 608:RT-Thread/src/thread.c ****             thread->high_mask   = 1 << (thread->current_priority & 0x07);   /* 3bit */
 1368              		.loc 1 608 33 view .LVU409
 1369 0038 E163     		str	r1, [r4, #60]
 609:RT-Thread/src/thread.c **** #else
 1370              		.loc 1 609 13 is_stmt 1 view .LVU410
 609:RT-Thread/src/thread.c **** #else
 1371              		.loc 1 609 66 is_stmt 0 view .LVU411
 1372 003a 03F00703 		and	r3, r3, #7
 609:RT-Thread/src/thread.c **** #else
 1373              		.loc 1 609 37 view .LVU412
 1374 003e 02FA03F3 		lsl	r3, r2, r3
 609:RT-Thread/src/thread.c **** #else
 1375              		.loc 1 609 33 view .LVU413
 1376 0042 84F83830 		strb	r3, [r4, #56]
 1377              	.LVL122:
 1378              	.L73:
 616:RT-Thread/src/thread.c ****         break;
 1379              		.loc 1 616 9 is_stmt 1 view .LVU414
 1380 0046 3046     		mov	r0, r6
 1381 0048 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1382              	.LVL123:
 617:RT-Thread/src/thread.c **** 
 1383              		.loc 1 617 9 view .LVU415
 631:RT-Thread/src/thread.c **** }
 1384              		.loc 1 631 12 is_stmt 0 view .LVU416
 1385 004c 0020     		movs	r0, #0
 617:RT-Thread/src/thread.c **** 
 1386              		.loc 1 617 9 view .LVU417
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 45


 1387 004e E0E7     		b	.L67
 1388              	.LVL124:
 1389              	.L75:
 584:RT-Thread/src/thread.c **** 
 1390              		.loc 1 584 13 is_stmt 1 view .LVU418
 1391 0050 2046     		mov	r0, r4
 1392              	.LVL125:
 584:RT-Thread/src/thread.c **** 
 1393              		.loc 1 584 13 is_stmt 0 view .LVU419
 1394 0052 FFF7FEFF 		bl	rt_schedule_remove_thread
 1395              	.LVL126:
 587:RT-Thread/src/thread.c **** 
 1396              		.loc 1 587 13 is_stmt 1 view .LVU420
 587:RT-Thread/src/thread.c **** 
 1397              		.loc 1 587 40 is_stmt 0 view .LVU421
 1398 0056 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 587:RT-Thread/src/thread.c **** 
 1399              		.loc 1 587 38 view .LVU422
 1400 0058 84F83530 		strb	r3, [r4, #53]
 591:RT-Thread/src/thread.c ****             thread->number_mask = 1 << thread->number;
 1401              		.loc 1 591 13 is_stmt 1 view .LVU423
 591:RT-Thread/src/thread.c ****             thread->number_mask = 1 << thread->number;
 1402              		.loc 1 591 33 is_stmt 0 view .LVU424
 1403 005c D908     		lsrs	r1, r3, #3
 1404 005e 84F83710 		strb	r1, [r4, #55]
 592:RT-Thread/src/thread.c ****             thread->high_mask   = 1 << (thread->current_priority & 0x07);   /* 3bit */
 1405              		.loc 1 592 13 is_stmt 1 view .LVU425
 592:RT-Thread/src/thread.c ****             thread->high_mask   = 1 << (thread->current_priority & 0x07);   /* 3bit */
 1406              		.loc 1 592 37 is_stmt 0 view .LVU426
 1407 0062 0122     		movs	r2, #1
 1408 0064 02FA01F1 		lsl	r1, r2, r1
 592:RT-Thread/src/thread.c ****             thread->high_mask   = 1 << (thread->current_priority & 0x07);   /* 3bit */
 1409              		.loc 1 592 33 view .LVU427
 1410 0068 E163     		str	r1, [r4, #60]
 593:RT-Thread/src/thread.c **** #else
 1411              		.loc 1 593 13 is_stmt 1 view .LVU428
 593:RT-Thread/src/thread.c **** #else
 1412              		.loc 1 593 66 is_stmt 0 view .LVU429
 1413 006a 03F00703 		and	r3, r3, #7
 593:RT-Thread/src/thread.c **** #else
 1414              		.loc 1 593 37 view .LVU430
 1415 006e 02FA03F3 		lsl	r3, r2, r3
 593:RT-Thread/src/thread.c **** #else
 1416              		.loc 1 593 33 view .LVU431
 1417 0072 84F83830 		strb	r3, [r4, #56]
 599:RT-Thread/src/thread.c ****         }
 1418              		.loc 1 599 13 is_stmt 1 view .LVU432
 1419 0076 2046     		mov	r0, r4
 1420 0078 FFF7FEFF 		bl	rt_schedule_insert_thread
 1421              	.LVL127:
 1422 007c E3E7     		b	.L73
 1423              	.LVL128:
 1424              	.L70:
 620:RT-Thread/src/thread.c **** 
 1425              		.loc 1 620 9 view .LVU433
 620:RT-Thread/src/thread.c **** 
 1426              		.loc 1 620 16 is_stmt 0 view .LVU434
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 46


 1427 007e FFF7FEFF 		bl	rt_thread_startup
 1428              	.LVL129:
 620:RT-Thread/src/thread.c **** 
 1429              		.loc 1 620 16 view .LVU435
 1430 0082 C6E7     		b	.L67
 1431              	.LVL130:
 1432              	.L68:
 624:RT-Thread/src/thread.c **** #endif
 1433              		.loc 1 624 9 is_stmt 1 view .LVU436
 624:RT-Thread/src/thread.c **** #endif
 1434              		.loc 1 624 16 is_stmt 0 view .LVU437
 1435 0084 FFF7FEFF 		bl	rt_thread_delete
 1436              	.LVL131:
 624:RT-Thread/src/thread.c **** #endif
 1437              		.loc 1 624 16 view .LVU438
 1438 0088 C3E7     		b	.L67
 1439              		.cfi_endproc
 1440              	.LFE27:
 1442              		.section	.text.rt_thread_find,"ax",%progbits
 1443              		.align	1
 1444              		.global	rt_thread_find
 1445              		.syntax unified
 1446              		.thumb
 1447              		.thumb_func
 1448              		.fpu softvfp
 1450              	rt_thread_find:
 1451              	.LVL132:
 1452              	.LFB31:
 754:RT-Thread/src/thread.c **** RTM_EXPORT(rt_thread_timeout);
 755:RT-Thread/src/thread.c **** 
 756:RT-Thread/src/thread.c **** /**
 757:RT-Thread/src/thread.c ****  * This function will find the specified thread.
 758:RT-Thread/src/thread.c ****  *
 759:RT-Thread/src/thread.c ****  * @param name the name of thread finding
 760:RT-Thread/src/thread.c ****  *
 761:RT-Thread/src/thread.c ****  * @return the found thread
 762:RT-Thread/src/thread.c ****  *
 763:RT-Thread/src/thread.c ****  * @note please don't invoke this function in interrupt status.
 764:RT-Thread/src/thread.c ****  */
 765:RT-Thread/src/thread.c **** rt_thread_t rt_thread_find(char *name)
 766:RT-Thread/src/thread.c **** {
 1453              		.loc 1 766 1 is_stmt 1 view -0
 1454              		.cfi_startproc
 1455              		@ args = 0, pretend = 0, frame = 0
 1456              		@ frame_needed = 0, uses_anonymous_args = 0
 1457              		.loc 1 766 1 is_stmt 0 view .LVU440
 1458 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1459              	.LCFI25:
 1460              		.cfi_def_cfa_offset 24
 1461              		.cfi_offset 3, -24
 1462              		.cfi_offset 4, -20
 1463              		.cfi_offset 5, -16
 1464              		.cfi_offset 6, -12
 1465              		.cfi_offset 7, -8
 1466              		.cfi_offset 14, -4
 1467 0002 0746     		mov	r7, r0
 767:RT-Thread/src/thread.c ****     struct rt_object_information *information;
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 47


 1468              		.loc 1 767 5 is_stmt 1 view .LVU441
 768:RT-Thread/src/thread.c ****     struct rt_object *object;
 1469              		.loc 1 768 5 view .LVU442
 769:RT-Thread/src/thread.c ****     struct rt_list_node *node;
 1470              		.loc 1 769 5 view .LVU443
 770:RT-Thread/src/thread.c **** 
 771:RT-Thread/src/thread.c ****     /* enter critical */
 772:RT-Thread/src/thread.c ****     if (rt_thread_self() != RT_NULL)
 1471              		.loc 1 772 5 view .LVU444
 1472              		.loc 1 772 9 is_stmt 0 view .LVU445
 1473 0004 FFF7FEFF 		bl	rt_thread_self
 1474              	.LVL133:
 1475              		.loc 1 772 8 view .LVU446
 1476 0008 08B1     		cbz	r0, .L77
 773:RT-Thread/src/thread.c ****         rt_enter_critical();
 1477              		.loc 1 773 9 is_stmt 1 view .LVU447
 1478 000a FFF7FEFF 		bl	rt_enter_critical
 1479              	.LVL134:
 1480              	.L77:
 774:RT-Thread/src/thread.c **** 
 775:RT-Thread/src/thread.c ****     /* try to find device object */
 776:RT-Thread/src/thread.c ****     information = rt_object_get_information(RT_Object_Class_Thread);
 1481              		.loc 1 776 5 view .LVU448
 1482              		.loc 1 776 19 is_stmt 0 view .LVU449
 1483 000e 0120     		movs	r0, #1
 1484 0010 FFF7FEFF 		bl	rt_object_get_information
 1485              	.LVL135:
 1486 0014 0646     		mov	r6, r0
 1487              	.LVL136:
 777:RT-Thread/src/thread.c ****     RT_ASSERT(information != RT_NULL);
 1488              		.loc 1 777 38 is_stmt 1 view .LVU450
 778:RT-Thread/src/thread.c ****     for (node  = information->object_list.next;
 1489              		.loc 1 778 5 view .LVU451
 1490              		.loc 1 778 16 is_stmt 0 view .LVU452
 1491 0016 4468     		ldr	r4, [r0, #4]
 1492              	.LVL137:
 1493              	.L78:
 779:RT-Thread/src/thread.c ****          node != &(information->object_list);
 1494              		.loc 1 779 10 is_stmt 1 discriminator 1 view .LVU453
 1495              		.loc 1 779 18 is_stmt 0 discriminator 1 view .LVU454
 1496 0018 331D     		adds	r3, r6, #4
 778:RT-Thread/src/thread.c ****     for (node  = information->object_list.next;
 1497              		.loc 1 778 5 discriminator 1 view .LVU455
 1498 001a A342     		cmp	r3, r4
 1499 001c 0FD0     		beq	.L84
 780:RT-Thread/src/thread.c ****          node  = node->next)
 781:RT-Thread/src/thread.c ****     {
 782:RT-Thread/src/thread.c ****         object = rt_list_entry(node, struct rt_object, list);
 1500              		.loc 1 782 9 is_stmt 1 view .LVU456
 1501              		.loc 1 782 16 is_stmt 0 view .LVU457
 1502 001e A4F10C05 		sub	r5, r4, #12
 1503              	.LVL138:
 783:RT-Thread/src/thread.c ****         if (rt_strncmp(object->name, name, RT_NAME_MAX) == 0)
 1504              		.loc 1 783 9 is_stmt 1 view .LVU458
 1505              		.loc 1 783 13 is_stmt 0 view .LVU459
 1506 0022 0822     		movs	r2, #8
 1507 0024 3946     		mov	r1, r7
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 48


 1508 0026 2846     		mov	r0, r5
 1509 0028 FFF7FEFF 		bl	rt_strncmp
 1510              	.LVL139:
 1511              		.loc 1 783 12 view .LVU460
 1512 002c 08B1     		cbz	r0, .L85
 780:RT-Thread/src/thread.c ****          node  = node->next)
 1513              		.loc 1 780 10 is_stmt 1 view .LVU461
 780:RT-Thread/src/thread.c ****          node  = node->next)
 1514              		.loc 1 780 16 is_stmt 0 view .LVU462
 1515 002e 2468     		ldr	r4, [r4]
 1516              	.LVL140:
 780:RT-Thread/src/thread.c ****          node  = node->next)
 1517              		.loc 1 780 16 view .LVU463
 1518 0030 F2E7     		b	.L78
 1519              	.L85:
 784:RT-Thread/src/thread.c ****         {
 785:RT-Thread/src/thread.c ****             /* leave critical */
 786:RT-Thread/src/thread.c ****             if (rt_thread_self() != RT_NULL)
 1520              		.loc 1 786 13 is_stmt 1 view .LVU464
 1521              		.loc 1 786 17 is_stmt 0 view .LVU465
 1522 0032 FFF7FEFF 		bl	rt_thread_self
 1523              	.LVL141:
 1524              		.loc 1 786 16 view .LVU466
 1525 0036 48B1     		cbz	r0, .L76
 787:RT-Thread/src/thread.c ****                 rt_exit_critical();
 1526              		.loc 1 787 17 is_stmt 1 view .LVU467
 1527 0038 FFF7FEFF 		bl	rt_exit_critical
 1528              	.LVL142:
 788:RT-Thread/src/thread.c **** 
 789:RT-Thread/src/thread.c ****             return (rt_thread_t)object;
 1529              		.loc 1 789 13 view .LVU468
 1530              		.loc 1 789 20 is_stmt 0 view .LVU469
 1531 003c 06E0     		b	.L76
 1532              	.LVL143:
 1533              	.L84:
 790:RT-Thread/src/thread.c ****         }
 791:RT-Thread/src/thread.c ****     }
 792:RT-Thread/src/thread.c **** 
 793:RT-Thread/src/thread.c ****     /* leave critical */
 794:RT-Thread/src/thread.c ****     if (rt_thread_self() != RT_NULL)
 1534              		.loc 1 794 5 is_stmt 1 view .LVU470
 1535              		.loc 1 794 9 is_stmt 0 view .LVU471
 1536 003e FFF7FEFF 		bl	rt_thread_self
 1537              	.LVL144:
 1538              		.loc 1 794 8 view .LVU472
 1539 0042 0546     		mov	r5, r0
 1540 0044 10B1     		cbz	r0, .L76
 795:RT-Thread/src/thread.c ****         rt_exit_critical();
 1541              		.loc 1 795 9 is_stmt 1 view .LVU473
 1542 0046 FFF7FEFF 		bl	rt_exit_critical
 1543              	.LVL145:
 796:RT-Thread/src/thread.c **** 
 797:RT-Thread/src/thread.c ****     /* not found */
 798:RT-Thread/src/thread.c ****     return RT_NULL;
 1544              		.loc 1 798 12 is_stmt 0 view .LVU474
 1545 004a 0025     		movs	r5, #0
 1546              	.L76:
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 49


 799:RT-Thread/src/thread.c **** }
 1547              		.loc 1 799 1 view .LVU475
 1548 004c 2846     		mov	r0, r5
 1549 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1550              		.loc 1 799 1 view .LVU476
 1551              		.cfi_endproc
 1552              	.LFE31:
 1554              		.text
 1555              	.Letext0:
 1556              		.file 3 "RT-Thread/include/rtdef.h"
 1557              		.file 4 "RT-Thread/include/rtthread.h"
 1558              		.file 5 "RT-Thread/include/rthw.h"
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 50


DEFINED SYMBOLS
                            *ABS*:00000000 thread.c
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:16     .text.rt_thread_exit:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:24     .text.rt_thread_exit:00000000 rt_thread_exit
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:126    .text.rt_thread_exit:00000054 $d
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:132    .text._rt_thread_init:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:138    .text._rt_thread_init:00000000 _rt_thread_init
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:273    .text._rt_thread_init:00000078 $d
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:286    .text.rt_thread_timeout:00000000 rt_thread_timeout
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:279    .text.rt_thread_timeout:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:349    .text.rt_thread_init:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:356    .text.rt_thread_init:00000000 rt_thread_init
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:417    .text.rt_thread_self:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:424    .text.rt_thread_self:00000000 rt_thread_self
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:439    .text.rt_thread_self:00000008 $d
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:444    .text.rt_thread_detach:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:451    .text.rt_thread_detach:00000000 rt_thread_detach
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:552    .text.rt_thread_detach:00000054 $d
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:557    .text.rt_thread_create:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:564    .text.rt_thread_create:00000000 rt_thread_create
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:661    .text.rt_thread_delete:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:668    .text.rt_thread_delete:00000000 rt_thread_delete
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:749    .text.rt_thread_delete:00000040 $d
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:754    .text.rt_thread_yield:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:761    .text.rt_thread_yield:00000000 rt_thread_yield
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:875    .text.rt_thread_yield:00000054 $d
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:881    .text.rt_thread_suspend:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:888    .text.rt_thread_suspend:00000000 rt_thread_suspend
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:964    .text.rt_thread_sleep:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:971    .text.rt_thread_sleep:00000000 rt_thread_sleep
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:1058   .text.rt_thread_sleep:00000048 $d
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:1063   .text.rt_thread_delay:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:1070   .text.rt_thread_delay:00000000 rt_thread_delay
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:1093   .text.rt_thread_mdelay:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:1100   .text.rt_thread_mdelay:00000000 rt_thread_mdelay
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:1128   .text.rt_thread_resume:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:1135   .text.rt_thread_resume:00000000 rt_thread_resume
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:1230   .text.rt_thread_startup:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:1237   .text.rt_thread_startup:00000000 rt_thread_startup
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:1301   .text.rt_thread_control:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:1308   .text.rt_thread_control:00000000 rt_thread_control
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:1443   .text.rt_thread_find:00000000 $t
C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s:1450   .text.rt_thread_find:00000000 rt_thread_find

UNDEFINED SYMBOLS
rt_hw_interrupt_disable
rt_schedule_remove_thread
rt_timer_detach
rt_object_is_systemobject
rt_hw_interrupt_enable
rt_schedule
rt_object_detach
rt_current_thread
rt_thread_defunct
rt_memset
rt_hw_stack_init
rt_timer_init
ARM GAS  C:\Users\yzy\AppData\Local\Temp\ccXjYToA.s 			page 51


rt_schedule_insert_thread
rt_object_init
rt_object_allocate
rt_malloc
rt_object_delete
rt_thread_priority_table
rt_timer_stop
rt_timer_control
rt_timer_start
rt_tick_from_millisecond
rt_enter_critical
rt_object_get_information
rt_strncmp
rt_exit_critical
